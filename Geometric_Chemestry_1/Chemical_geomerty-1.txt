{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO0MAB91mHbPRNWvAM6LGqU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"cellView":"form","id":"6FQZhAmNGgMa","executionInfo":{"status":"ok","timestamp":1758220567794,"user_tz":-720,"elapsed":64258,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"a9746e3f-4809-43d6-fcf3-18e6e09aaabf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting rdkit\n","  Downloading rdkit-2025.3.6-cp312-cp312-manylinux_2_28_x86_64.whl.metadata (4.1 kB)\n","Requirement already satisfied: umap-learn in /usr/local/lib/python3.12/dist-packages (0.5.9.post2)\n","Requirement already satisfied: plotly in /usr/local/lib/python3.12/dist-packages (5.24.1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.12/dist-packages (2.2.2)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.12/dist-packages (2.0.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.12/dist-packages (1.6.1)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.12/dist-packages (from rdkit) (11.3.0)\n","Requirement already satisfied: scipy>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from umap-learn) (1.16.1)\n","Requirement already satisfied: numba>=0.51.2 in /usr/local/lib/python3.12/dist-packages (from umap-learn) (0.60.0)\n","Requirement already satisfied: pynndescent>=0.5 in /usr/local/lib/python3.12/dist-packages (from umap-learn) (0.5.13)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.12/dist-packages (from umap-learn) (4.67.1)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.12/dist-packages (from plotly) (8.5.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.12/dist-packages (from plotly) (25.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (1.5.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (3.6.0)\n","Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.12/dist-packages (from numba>=0.51.2->umap-learn) (0.43.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Downloading rdkit-2025.3.6-cp312-cp312-manylinux_2_28_x86_64.whl (36.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m36.1/36.1 MB\u001b[0m \u001b[31m51.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: rdkit\n","Successfully installed rdkit-2025.3.6\n"]},{"output_type":"stream","name":"stderr","text":["[18:35:54] SMILES Parse Error: syntax error while parsing: C6H12O6\n","[18:35:54] SMILES Parse Error: check for mistakes around position 3:\n","[18:35:54] C6H12O6\n","[18:35:54] ~~^\n","[18:35:54] SMILES Parse Error: Failed parsing SMILES 'C6H12O6' for input: 'C6H12O6'\n","/usr/local/lib/python3.12/dist-packages/umap/umap_.py:1952: UserWarning: n_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism.\n","  warn(\n"]},{"output_type":"stream","name":"stdout","text":["✅ Computed features for 11 compounds\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"ef8ca568-8ecc-450f-905d-374c66a58e27\" class=\"plotly-graph-div\" style=\"height:800px; width:800px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"ef8ca568-8ecc-450f-905d-374c66a58e27\")) {                    Plotly.newPlot(                        \"ef8ca568-8ecc-450f-905d-374c66a58e27\",                        [{\"customdata\":[[\"O\",18.015,1,-0.8247],[\"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\",194.194,14,-1.0293],[\"CC(=O)OC1=CC=CC=C1C(=O)O\",180.15899999999996,13,1.3101],[\"C1=CC(=C(C=C1CCN)O)O\",153.181,11,0.5989999999999995],[\"C1=CC2=C(C=C1N)NC=C2\",132.166,10,1.7500999999999998],[\"Nc1ncnc2n(cnc12)C3OC(COP(O)(=O)OP(O)(=O)OP(O)(O)=O)C(O)C3O\",507.1820000000001,31,-1.6290000000000004],[\"CC1(C(N2C(S1)C(C2=O)NC(=O)CC3=CC=CC=C3)C(=O)O)C\",334.39700000000005,23,0.8607999999999993],[\"CC1=C(C(CCC1=O)(C)C)C=CC(=CC=CC(=CC=CC=C(C)C=CC=C(C)C=CC2=C(CCCC2(C)C)C)C)C\",550.8710000000003,41,11.784799999999985],[\"CC(=O)NCCC1=CNc2c1cc(OC)cc2\",232.283,17,1.8551],[\"CN1CCC[C@H]1c2cccnc2\",162.236,12,1.8483],[\"O=C(O)CC(\\u002fC=C\\u002fC1=CC(=O)C2=C(O)C=CC=C2O1)=C\\u002fC3=CC(=O)C4=C(O)C=CC=C4O3\",432.3840000000002,32,3.882100000000002]],\"hovertemplate\":\"x=%{x}\\u003cbr\\u003ey=%{y}\\u003cbr\\u003ename=%{text}\\u003cbr\\u003esmiles=%{customdata[0]}\\u003cbr\\u003eMolWt=%{customdata[1]}\\u003cbr\\u003eNumAtoms=%{customdata[2]}\\u003cbr\\u003eLogP=%{customdata[3]}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"RoyalBlue\",\"symbol\":\"circle\",\"size\":12},\"mode\":\"markers+text\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"text\":[\"Water\",\"Caffeine\",\"Aspirin\",\"Dopamine\",\"Serotonin\",\"ATP\",\"Penicillin G\",\"Lycopene\",\"Melatonin\",\"Nicotine\",\"Curcumin\"],\"x\":[4.043148,4.2208123,4.3015814,3.5899084,3.93133,4.5738635,4.8292737,5.289226,4.6357293,4.7057877,5.053516],\"xaxis\":\"x\",\"y\":[13.76441,12.2312765,14.44921,13.581623,12.713604,17.104342,16.428993,17.04345,15.606727,12.88199,17.492651],\"yaxis\":\"y\",\"type\":\"scatter\",\"textposition\":\"top center\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Geometric Dimension 1\"},\"range\":[-2,2]},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Geometric Dimension 2\"},\"range\":[-2,2]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"🧪 Chemical Compounds Mapped Geometrically — 2D Projection (Your UBP Vision)\"},\"height\":800,\"width\":800,\"plot_bgcolor\":\"rgba(0,0,0,0.05)\",\"paper_bgcolor\":\"white\",\"shapes\":[{\"line\":{\"color\":\"LightSkyBlue\",\"width\":2},\"type\":\"rect\",\"x0\":-1.8,\"x1\":1.8,\"y0\":-1.8,\"y1\":1.8},{\"line\":{\"color\":\"Salmon\",\"width\":2},\"type\":\"circle\",\"x0\":-1.5,\"x1\":1.5,\"xref\":\"x\",\"y0\":-1.5,\"y1\":1.5,\"yref\":\"y\"}]},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('ef8ca568-8ecc-450f-905d-374c66a58e27');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","🔍 GEOMETRIC RELATIONSHIP DETECTION\n","==================================================\n","🔷 Found Equilateral Triads (Possible Synergistic Groups):\n","  → Water, Serotonin, Nicotine (avg distance: 0.98)\n","  → Caffeine, Serotonin, Nicotine (avg distance: 0.72)\n","  → Aspirin, Dopamine, Nicotine (avg distance: 1.35)\n","  → ATP, Penicillin G, Lycopene (avg distance: 0.74)\n","  → ATP, Penicillin G, Curcumin (avg distance: 0.81)\n","  → ATP, Lycopene, Curcumin (avg distance: 0.61)\n","  → Penicillin G, Lycopene, Curcumin (avg distance: 0.79)\n","\n","📏 Approximate Collinear Triples (Linear Pathways?):\n","  → Water, Aspirin, Serotonin (area: 0.097)\n","  → Water, Aspirin, Penicillin G (area: 0.075)\n","  → Water, Aspirin, Lycopene (area: 0.003)\n","  → Water, Aspirin, Melatonin (area: 0.035)\n","  → Water, Serotonin, ATP (area: 0.092)\n","  → Water, Penicillin G, Melatonin (area: 0.065)\n","  → Caffeine, Dopamine, Serotonin (area: 0.043)\n","  → Aspirin, Serotonin, Penicillin G (area: 0.091)\n","  → Aspirin, Serotonin, Melatonin (area: 0.076)\n","  → Aspirin, Serotonin, Curcumin (area: 0.089)\n","  → Aspirin, Penicillin G, Melatonin (area: 0.025)\n","  → Aspirin, Penicillin G, Curcumin (area: 0.059)\n","  → Aspirin, Melatonin, Curcumin (area: 0.073)\n","  → Dopamine, Lycopene, Melatonin (area: 0.090)\n","  → Serotonin, Penicillin G, Melatonin (area: 0.010)\n","  → Serotonin, Penicillin G, Curcumin (area: 0.061)\n","  → Serotonin, Melatonin, Curcumin (area: 0.060)\n","  → ATP, Melatonin, Nicotine (area: 0.032)\n","  → Penicillin G, Melatonin, Curcumin (area: 0.011)\n","\n","💾 Saved projection to 'chemical_geometry_map.csv'\n","\n","✨ NEXT STEPS:\n","1. Replace sample_compounds with real data (PubChem, ChEMBL, etc.)\n","2. Add 3D projection (torus, sphere) — uncomment below when ready\n","3. Add resonance detection (e.g., distances ≈ π, φ, √2, etc.)\n","4. Connect to UBP: assign biological meaning to geometric patterns\n"]}],"source":["# @title 🌀 CHEMICAL GEOMETRY EXPLORER\n","# Maps compounds to geometric space + 2D projection\n","# For testing UBP-inspired spatial relationship discovery\n","# =====================================================\n","\n","# %% [markdown]\n","# # 🌐 Step 1: Install & Import\n","\n","# %%\n","!pip install rdkit umap-learn plotly pandas numpy scikit-learn\n","\n","import pandas as pd\n","import numpy as np\n","from rdkit import Chem\n","from rdkit.Chem import Descriptors, Draw\n","import umap\n","import plotly.express as px\n","import plotly.graph_objects as go\n","from sklearn.manifold import TSNE\n","from sklearn.preprocessing import StandardScaler\n","\n","# %% [markdown]\n","# # 🧬 Step 2: Define Sample Compounds (Replace with Real DB Later)\n","\n","# %%\n","# Sample compounds — you can replace this with PubChem/ChEMBL data later\n","sample_compounds = [\n","    {\"name\": \"Water\", \"smiles\": \"O\"},\n","    {\"name\": \"Glucose\", \"smiles\": \"C6H12O6\"},\n","    {\"name\": \"Caffeine\", \"smiles\": \"CN1C=NC2=C1C(=O)N(C(=O)N2C)C\"},\n","    {\"name\": \"Aspirin\", \"smiles\": \"CC(=O)OC1=CC=CC=C1C(=O)O\"},\n","    {\"name\": \"Dopamine\", \"smiles\": \"C1=CC(=C(C=C1CCN)O)O\"},\n","    {\"name\": \"Serotonin\", \"smiles\": \"C1=CC2=C(C=C1N)NC=C2\"},\n","    {\"name\": \"ATP\", \"smiles\": \"Nc1ncnc2n(cnc12)C3OC(COP(O)(=O)OP(O)(=O)OP(O)(O)=O)C(O)C3O\"},\n","    {\"name\": \"Penicillin G\", \"smiles\": \"CC1(C(N2C(S1)C(C2=O)NC(=O)CC3=CC=CC=C3)C(=O)O)C\"},\n","    {\"name\": \"Lycopene\", \"smiles\": \"CC1=C(C(CCC1=O)(C)C)C=CC(=CC=CC(=CC=CC=C(C)C=CC=C(C)C=CC2=C(CCCC2(C)C)C)C)C\"},\n","    {\"name\": \"Melatonin\", \"smiles\": \"CC(=O)NCCC1=CNc2c1cc(OC)cc2\"},\n","    {\"name\": \"Nicotine\", \"smiles\": \"CN1CCC[C@H]1c2cccnc2\"},\n","    {\"name\": \"Curcumin\", \"smiles\": \"O=C(O)CC(/C=C/C1=CC(=O)C2=C(O)C=CC=C2O1)=C/C3=CC(=O)C4=C(O)C=CC=C4O3\"},\n","]\n","\n","# %% [markdown]\n","# # 📊 Step 3: Compute Molecular Features\n","\n","# %%\n","def compute_features(smiles):\n","    mol = Chem.MolFromSmiles(smiles)\n","    if mol is None:\n","        return None\n","    return {\n","        \"MolWt\": Descriptors.MolWt(mol),\n","        \"NumAtoms\": mol.GetNumAtoms(),\n","        \"NumBonds\": mol.GetNumBonds(),\n","        \"NumHeteroatoms\": Descriptors.NumHeteroatoms(mol),\n","        \"NumRotatableBonds\": Descriptors.NumRotatableBonds(mol),\n","        \"TPSA\": Descriptors.TPSA(mol),  # Topological Polar Surface Area\n","        \"LogP\": Descriptors.MolLogP(mol), # Partition coefficient\n","        \"NumRings\": Descriptors.RingCount(mol),\n","    }\n","\n","# Compute features for all\n","compound_data = []\n","for c in sample_compounds:\n","    feats = compute_features(c[\"smiles\"])\n","    if feats:\n","        feats[\"name\"] = c[\"name\"]\n","        feats[\"smiles\"] = c[\"smiles\"]\n","        compound_data.append(feats)\n","\n","df = pd.DataFrame(compound_data)\n","print(\"✅ Computed features for\", len(df), \"compounds\")\n","df.head()\n","\n","# %% [markdown]\n","# # 🧭 Step 4: Project to 2D (Your \"Donut → Circle → Square\" Vision)\n","\n","# %%\n","# Normalize features\n","feature_cols = [col for col in df.columns if col not in [\"name\", \"smiles\"]]\n","X = df[feature_cols].values\n","X_scaled = StandardScaler().fit_transform(X)\n","\n","# Project with UMAP (preserves local/global structure — your \"toroidal\" intuition)\n","reducer = umap.UMAP(n_components=2, random_state=42, n_neighbors=3, min_dist=0.1)\n","embedding = reducer.fit_transform(X_scaled)\n","\n","# Add to dataframe\n","df[\"x\"] = embedding[:, 0]\n","df[\"y\"] = embedding[:, 1]\n","\n","# %% [markdown]\n","# # 🖼️ Step 5: Interactive 2D Visualization (Circle-in-Square Style)\n","\n","# %%\n","# Create Plotly scatter plot\n","fig = px.scatter(\n","    df, x=\"x\", y=\"y\",\n","    text=\"name\",\n","    hover_data=[\"smiles\", \"MolWt\", \"NumAtoms\", \"LogP\"],\n","    title=\"🧪 Chemical Compounds Mapped Geometrically — 2D Projection (Your UBP Vision)\",\n","    width=800, height=800\n",")\n","\n","# Customize: make it look like \"circle within square\"\n","fig.update_layout(\n","    xaxis=dict(range=[-2, 2], title=\"Geometric Dimension 1\"),\n","    yaxis=dict(range=[-2, 2], title=\"Geometric Dimension 2\"),\n","    plot_bgcolor='rgba(0,0,0,0.05)',\n","    paper_bgcolor='white',\n","    shapes=[\n","        # Square boundary\n","        dict(type=\"rect\", x0=-1.8, y0=-1.8, x1=1.8, y1=1.8,\n","             line=dict(color=\"LightSkyBlue\", width=2)),\n","        # Circle inscribed\n","        dict(type=\"circle\", xref=\"x\", yref=\"y\",\n","             x0=-1.5, y0=-1.5, x1=1.5, y1=1.5,\n","             line=dict(color=\"Salmon\", width=2))\n","    ]\n",")\n","\n","# Make text visible and pretty\n","fig.update_traces(textposition='top center', marker=dict(size=12, color='RoyalBlue'))\n","\n","# Show\n","fig.show()\n","\n","# %% [markdown]\n","# # 🔍 Step 6: Auto-Detect Geometric Relationships (Triangles, Lines, Clusters)\n","\n","# %%\n","from itertools import combinations\n","from scipy.spatial.distance import pdist, squareform\n","\n","# Get coordinates\n","coords = df[[\"x\", \"y\"]].values\n","names = df[\"name\"].values\n","\n","# Compute pairwise distances\n","dist_matrix = squareform(pdist(coords))\n","\n","print(\"\\n🔍 GEOMETRIC RELATIONSHIP DETECTION\")\n","print(\"=\"*50)\n","\n","# Find equilateral triangles (within tolerance)\n","tolerance = 0.3\n","triads = []\n","for i,j,k in combinations(range(len(names)), 3):\n","    d1 = dist_matrix[i,j]\n","    d2 = dist_matrix[j,k]\n","    d3 = dist_matrix[k,i]\n","    avg = (d1 + d2 + d3)/3\n","    if abs(d1 - avg) < tolerance and abs(d2 - avg) < tolerance and abs(d3 - avg) < tolerance:\n","        triads.append((names[i], names[j], names[k], avg))\n","\n","if triads:\n","    print(\"🔷 Found Equilateral Triads (Possible Synergistic Groups):\")\n","    for t in triads:\n","        print(f\"  → {t[0]}, {t[1]}, {t[2]} (avg distance: {t[3]:.2f})\")\n","else:\n","    print(\"No equilateral triads found within tolerance.\")\n","\n","# Find collinear triples (approximate)\n","print(\"\\n📏 Approximate Collinear Triples (Linear Pathways?):\")\n","for i,j,k in combinations(range(len(names)), 3):\n","    # Use area of triangle = 0 for collinearity\n","    x1, y1 = coords[i]\n","    x2, y2 = coords[j]\n","    x3, y3 = coords[k]\n","    area = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) / 2\n","    if area < 0.1:\n","        print(f\"  → {names[i]}, {names[j]}, {names[k]} (area: {area:.3f})\")\n","\n","# %% [markdown]\n","# # 🧩 Step 7: Export & Extend\n","\n","# %%\n","# Save for later use\n","df.to_csv(\"chemical_geometry_map.csv\", index=False)\n","print(\"\\n💾 Saved projection to 'chemical_geometry_map.csv'\")\n","\n","print(\"\\n✨ NEXT STEPS:\")\n","print(\"1. Replace sample_compounds with real data (PubChem, ChEMBL, etc.)\")\n","print(\"2. Add 3D projection (torus, sphere) — uncomment below when ready\")\n","print(\"3. Add resonance detection (e.g., distances ≈ π, φ, √2, etc.)\")\n","print(\"4. Connect to UBP: assign biological meaning to geometric patterns\")\n","\n","# Optional: 3D torus projection (uncomment to try)\n","# from sklearn.manifold import Isomap\n","# reducer_3d = Isomap(n_components=3)\n","# embedding_3d = reducer_3d.fit_transform(X_scaled)\n","# df[\"x3\"] = embedding_3d[:,0]\n","# df[\"y3\"] = embedding_3d[:,1]\n","# df[\"z3\"] = embedding_3d[:,2]"]},{"cell_type":"markdown","metadata":{"id":"b8cec02d"},"source":["# Task\n","Replace the sample data with real data from a chemical database, compute features, perform 2D and 3D projections, visualize the projections, and implement resonance detection."]},{"cell_type":"markdown","metadata":{"id":"fb131ea1"},"source":["## Replace sample data with real data\n","\n","### Subtask:\n","Generate code to fetch data from a real chemical database like PubChem or ChEMBL.\n"]},{"cell_type":"markdown","metadata":{"id":"68870f44"},"source":["**Reasoning**:\n","Install the `pubchempy` library to access the PubChem database.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e5ee531e","executionInfo":{"status":"ok","timestamp":1758220718036,"user_tz":-720,"elapsed":10093,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"3151042d-6f56-4123-e214-f8234d635a0d"},"source":["!pip install pubchempy"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pubchempy\n","  Downloading pubchempy-1.0.5-py3-none-any.whl.metadata (4.3 kB)\n","Downloading pubchempy-1.0.5-py3-none-any.whl (21 kB)\n","Installing collected packages: pubchempy\n","Successfully installed pubchempy-1.0.5\n"]}]},{"cell_type":"markdown","metadata":{"id":"f6c4c13d"},"source":["**Reasoning**:\n","Import the `pubchempy` library and fetch a small set of diverse compounds from PubChem, storing their names and SMILES in a list of dictionaries.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5e533db2","executionInfo":{"status":"ok","timestamp":1758220729334,"user_tz":-720,"elapsed":3172,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"2fa449df-106b-4682-f291-006979d126c7"},"source":["import pubchempy as pcp\n","\n","# Fetch a small set of compounds from PubChem by their CIDs (example CIDs)\n","cids = [2244, # Aspirin\n","        5090, # Caffeine\n","        57,   # Water\n","        5933, # Glucose\n","        6819, # Dopamine\n","        520,  # Serotonin\n","        5957, # Melatonin\n","        2573, # Nicotine\n","       ]\n","\n","compounds = pcp.get_compounds(cids, 'cid')\n","\n","# Extract name and SMILES and store in the desired format\n","real_compounds_data = []\n","for compound in compounds:\n","    if compound.canonical_smiles:\n","        real_compounds_data.append({\n","            \"name\": compound.iupac_name or compound.synonyms[0] if compound.synonyms else f\"CID_{compound.cid}\",\n","            \"smiles\": compound.canonical_smiles\n","        })\n","\n","# Replace sample_compounds with the fetched real data\n","sample_compounds = real_compounds_data\n","\n","print(\"✅ Fetched real compound data from PubChem:\")\n","for comp in sample_compounds:\n","    print(f\"  - {comp['name']} ({comp['smiles']})\")\n"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-2773467300.py:19: PubChemPyDeprecationWarning:\n","\n","canonical_smiles is deprecated: Use connectivity_smiles instead\n","\n","/tmp/ipython-input-2773467300.py:22: PubChemPyDeprecationWarning:\n","\n","canonical_smiles is deprecated: Use connectivity_smiles instead\n","\n"]},{"output_type":"stream","name":"stdout","text":["✅ Fetched real compound data from PubChem:\n","  - 2-acetyloxybenzoic acid (CC(=O)OC1=CC=CC=C1C(=O)O)\n","  - 3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one (CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3)\n","  - 2-(3,7,11,15,19,23,27,31-octamethyldotriaconta-2,6,10,14,18,22,26,30-octaenyl)phenol (CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCC1=CC=CC=C1O)C)C)C)C)C)C)C)C)\n","  - CID_5933 (C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-])\n","  - 2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,2-dicarboxylate (CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC)\n","  - (2-amino-3-hydroxyoctadecyl) dihydrogen phosphate (CCCCCCCCCCCCCCCC(C(COP(=O)(O)O)N)O)\n","  - [[(2R,3S,4R,5R)-5-(6-aminopurin-9-yl)-3,4-dihydroxyoxolan-2-yl]methoxy-hydroxyphosphoryl] phosphono hydrogen phosphate (C1=NC(=C2C(=N1)N(C=N2)C3C(C(C(O3)COP(=O)(O)OP(=O)(O)OP(=O)(O)O)O)O)N)\n","  - 4-[3-[[4-[[[5-(6-aminopurin-9-yl)-4-hydroxy-3-phosphonooxyoxolan-2-yl]methoxy-hydroxyphosphoryl]oxy-hydroxyphosphoryl]oxy-2-hydroxy-3,3-dimethylbutanoyl]amino]propanoylamino]butanoic acid (CC(C)(COP(=O)(O)OP(=O)(O)OCC1C(C(C(O1)N2C=NC3=C(N=CN=C32)N)O)OP(=O)(O)O)C(C(=O)NCCC(=O)NCCCC(=O)O)O)\n"]}]},{"cell_type":"markdown","metadata":{"id":"4802293d"},"source":["## Compute features for real data\n","\n","### Subtask:\n","Adapt the existing `compute_features` function or use a more comprehensive set of molecular descriptors for the real data.\n"]},{"cell_type":"markdown","metadata":{"id":"d4922e5d"},"source":["**Reasoning**:\n","Inspect the existing `compute_features` function, apply it to the real data, store the results in a DataFrame, and display the head of the DataFrame.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":330},"id":"70998963","executionInfo":{"status":"ok","timestamp":1758220744222,"user_tz":-720,"elapsed":118,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"92379368-1ada-41e7-adb5-002514e2a7af"},"source":["# Inspecting the existing compute_features function:\n","# The function `compute_features` takes a SMILES string as input and returns a dictionary of features.\n","# This is compatible with the `sample_compounds` format which now contains real data with 'smiles' keys.\n","# The function includes a check for `mol is None` which handles potential issues with invalid SMILES strings.\n","\n","# Apply the compute_features function to the real data\n","compound_data = []\n","for c in sample_compounds:\n","    feats = compute_features(c[\"smiles\"])\n","    if feats: # Only append if features were successfully computed\n","        feats[\"name\"] = c[\"name\"]\n","        feats[\"smiles\"] = c[\"smiles\"]\n","        compound_data.append(feats)\n","\n","# Store the computed features in a pandas DataFrame\n","df = pd.DataFrame(compound_data)\n","\n","# Print the head of the resulting DataFrame\n","print(\"✅ Computed features for real compounds:\")\n","display(df.head())"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Computed features for real compounds:\n"]},{"output_type":"display_data","data":{"text/plain":["     MolWt  NumAtoms  NumBonds  NumHeteroatoms  NumRotatableBonds   TPSA  \\\n","0  180.159        13        13               4                  2  63.60   \n","1  314.362        22        24               5                  3  60.44   \n","2  639.065        47        47               1                 23  20.23   \n","3  340.708        11        10               5                  0  63.37   \n","4  336.384        24        24               6                 10  78.90   \n","\n","      LogP  NumRings                                               name  \\\n","0   1.3101         1                            2-acetyloxybenzoic acid   \n","1   2.5577         3  3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5...   \n","2  14.9864         1  2-(3,7,11,15,19,23,27,31-octamethyldotriaconta...   \n","3   0.5110         1                                           CID_5933   \n","4   3.1436         1  2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,...   \n","\n","                                              smiles  \n","0                           CC(=O)OC1=CC=CC=C1C(=O)O  \n","1   CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3  \n","2  CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=...  \n","3                  C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-]  \n","4             CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC  "],"text/html":["\n","  <div id=\"df-a869074f-e6a8-47f8-aa2c-a75ef3f644b0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MolWt</th>\n","      <th>NumAtoms</th>\n","      <th>NumBonds</th>\n","      <th>NumHeteroatoms</th>\n","      <th>NumRotatableBonds</th>\n","      <th>TPSA</th>\n","      <th>LogP</th>\n","      <th>NumRings</th>\n","      <th>name</th>\n","      <th>smiles</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>180.159</td>\n","      <td>13</td>\n","      <td>13</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>63.60</td>\n","      <td>1.3101</td>\n","      <td>1</td>\n","      <td>2-acetyloxybenzoic acid</td>\n","      <td>CC(=O)OC1=CC=CC=C1C(=O)O</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>314.362</td>\n","      <td>22</td>\n","      <td>24</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>60.44</td>\n","      <td>2.5577</td>\n","      <td>3</td>\n","      <td>3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5...</td>\n","      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>639.065</td>\n","      <td>47</td>\n","      <td>47</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>20.23</td>\n","      <td>14.9864</td>\n","      <td>1</td>\n","      <td>2-(3,7,11,15,19,23,27,31-octamethyldotriaconta...</td>\n","      <td>CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>340.708</td>\n","      <td>11</td>\n","      <td>10</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>63.37</td>\n","      <td>0.5110</td>\n","      <td>1</td>\n","      <td>CID_5933</td>\n","      <td>C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-]</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>336.384</td>\n","      <td>24</td>\n","      <td>24</td>\n","      <td>6</td>\n","      <td>10</td>\n","      <td>78.90</td>\n","      <td>3.1436</td>\n","      <td>1</td>\n","      <td>2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,...</td>\n","      <td>CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a869074f-e6a8-47f8-aa2c-a75ef3f644b0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a869074f-e6a8-47f8-aa2c-a75ef3f644b0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a869074f-e6a8-47f8-aa2c-a75ef3f644b0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-baf824f1-d29a-4414-a30a-3682424182f4\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-baf824f1-d29a-4414-a30a-3682424182f4')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-baf824f1-d29a-4414-a30a-3682424182f4 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"MolWt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 168.2334533714981,\n        \"min\": 180.15899999999996,\n        \"max\": 639.0650000000002,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          314.36199999999997,\n          336.3840000000002,\n          639.0650000000002\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumAtoms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 11,\n        \"max\": 47,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          22,\n          24,\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumBonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 47,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          24,\n          10,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumHeteroatoms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5,\n          6,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumRotatableBonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          10,\n          23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TPSA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.94959612384702,\n        \"min\": 20.23,\n        \"max\": 78.9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          60.44,\n          78.9,\n          20.23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LogP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.951144905226204,\n        \"min\": 0.5109999999999999,\n        \"max\": 14.986399999999962,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.5577000000000005,\n          3.143600000000002,\n          14.986399999999962\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumRings\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one\",\n          \"2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,2-dicarboxylate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smiles\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3\",\n          \"CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"472927e3"},"source":["## Perform 2d and 3d projections\n","\n","### Subtask:\n","Apply dimensionality reduction techniques (UMAP and potentially Isomap) to project the computed molecular features into 2D and 3D space.\n"]},{"cell_type":"markdown","metadata":{"id":"554dcc77"},"source":["**Reasoning**:\n","Apply UMAP for 2D and 3D projections and add the results to the dataframe.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":469},"id":"fd839826","executionInfo":{"status":"ok","timestamp":1758220758875,"user_tz":-720,"elapsed":178,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"46135ac3-d93f-4860-ec6e-e9a78304cc8f"},"source":["# Select the feature columns from the DataFrame df that will be used for dimensionality reduction.\n","feature_cols = [col for col in df.columns if col not in [\"name\", \"smiles\"]]\n","X = df[feature_cols].values\n","\n","# Standardize the selected feature data\n","X_scaled = StandardScaler().fit_transform(X)\n","\n","# Apply UMAP to create a 2D embedding\n","reducer_2d = umap.UMAP(n_components=2, random_state=42, n_neighbors=3, min_dist=0.1)\n","embedding_2d = reducer_2d.fit_transform(X_scaled)\n","\n","# Add the 2D UMAP embedding coordinates to the DataFrame df\n","df[\"x\"] = embedding_2d[:, 0]\n","df[\"y\"] = embedding_2d[:, 1]\n","\n","# Apply UMAP to create a 3D embedding\n","reducer_3d = umap.UMAP(n_components=3, random_state=42, n_neighbors=3, min_dist=0.1)\n","embedding_3d = reducer_3d.fit_transform(X_scaled)\n","\n","# Add the 3D embedding coordinates to the DataFrame df\n","df[\"x3\"] = embedding_3d[:, 0]\n","df[\"y3\"] = embedding_3d[:, 1]\n","df[\"z3\"] = embedding_3d[:, 2]\n","\n","print(\"✅ Applied UMAP for 2D and 3D projections and added to DataFrame.\")\n","display(df.head())"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Applied UMAP for 2D and 3D projections and added to DataFrame.\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/umap/umap_.py:1952: UserWarning:\n","\n","n_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism.\n","\n","/usr/local/lib/python3.12/dist-packages/umap/umap_.py:1952: UserWarning:\n","\n","n_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism.\n","\n"]},{"output_type":"display_data","data":{"text/plain":["     MolWt  NumAtoms  NumBonds  NumHeteroatoms  NumRotatableBonds   TPSA  \\\n","0  180.159        13        13               4                  2  63.60   \n","1  314.362        22        24               5                  3  60.44   \n","2  639.065        47        47               1                 23  20.23   \n","3  340.708        11        10               5                  0  63.37   \n","4  336.384        24        24               6                 10  78.90   \n","\n","      LogP  NumRings                                               name  \\\n","0   1.3101         1                            2-acetyloxybenzoic acid   \n","1   2.5577         3  3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5...   \n","2  14.9864         1  2-(3,7,11,15,19,23,27,31-octamethyldotriaconta...   \n","3   0.5110         1                                           CID_5933   \n","4   3.1436         1  2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,...   \n","\n","                                              smiles         x         y  \\\n","0                           CC(=O)OC1=CC=CC=C1C(=O)O -2.149322 -3.887489   \n","1   CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3 -2.044868 -2.919464   \n","2  CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=... -1.414256 -5.357307   \n","3                  C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-] -2.540499 -4.417902   \n","4             CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC -1.511771 -4.117507   \n","\n","         x3        y3        z3  \n","0  7.205451  5.510916  0.249612  \n","1  7.498172  6.430717  0.318550  \n","2  6.875647  4.469089  0.732941  \n","3  7.242733  5.209392 -0.362574  \n","4  7.824474  4.856133  0.399255  "],"text/html":["\n","  <div id=\"df-b7621735-6523-449f-b886-18a551904e41\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MolWt</th>\n","      <th>NumAtoms</th>\n","      <th>NumBonds</th>\n","      <th>NumHeteroatoms</th>\n","      <th>NumRotatableBonds</th>\n","      <th>TPSA</th>\n","      <th>LogP</th>\n","      <th>NumRings</th>\n","      <th>name</th>\n","      <th>smiles</th>\n","      <th>x</th>\n","      <th>y</th>\n","      <th>x3</th>\n","      <th>y3</th>\n","      <th>z3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>180.159</td>\n","      <td>13</td>\n","      <td>13</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>63.60</td>\n","      <td>1.3101</td>\n","      <td>1</td>\n","      <td>2-acetyloxybenzoic acid</td>\n","      <td>CC(=O)OC1=CC=CC=C1C(=O)O</td>\n","      <td>-2.149322</td>\n","      <td>-3.887489</td>\n","      <td>7.205451</td>\n","      <td>5.510916</td>\n","      <td>0.249612</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>314.362</td>\n","      <td>22</td>\n","      <td>24</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>60.44</td>\n","      <td>2.5577</td>\n","      <td>3</td>\n","      <td>3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5...</td>\n","      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3</td>\n","      <td>-2.044868</td>\n","      <td>-2.919464</td>\n","      <td>7.498172</td>\n","      <td>6.430717</td>\n","      <td>0.318550</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>639.065</td>\n","      <td>47</td>\n","      <td>47</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>20.23</td>\n","      <td>14.9864</td>\n","      <td>1</td>\n","      <td>2-(3,7,11,15,19,23,27,31-octamethyldotriaconta...</td>\n","      <td>CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=...</td>\n","      <td>-1.414256</td>\n","      <td>-5.357307</td>\n","      <td>6.875647</td>\n","      <td>4.469089</td>\n","      <td>0.732941</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>340.708</td>\n","      <td>11</td>\n","      <td>10</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>63.37</td>\n","      <td>0.5110</td>\n","      <td>1</td>\n","      <td>CID_5933</td>\n","      <td>C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-]</td>\n","      <td>-2.540499</td>\n","      <td>-4.417902</td>\n","      <td>7.242733</td>\n","      <td>5.209392</td>\n","      <td>-0.362574</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>336.384</td>\n","      <td>24</td>\n","      <td>24</td>\n","      <td>6</td>\n","      <td>10</td>\n","      <td>78.90</td>\n","      <td>3.1436</td>\n","      <td>1</td>\n","      <td>2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,...</td>\n","      <td>CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC</td>\n","      <td>-1.511771</td>\n","      <td>-4.117507</td>\n","      <td>7.824474</td>\n","      <td>4.856133</td>\n","      <td>0.399255</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b7621735-6523-449f-b886-18a551904e41')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b7621735-6523-449f-b886-18a551904e41 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b7621735-6523-449f-b886-18a551904e41');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-aeacf7ab-250b-44ad-a1dc-dc6a950c12f2\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aeacf7ab-250b-44ad-a1dc-dc6a950c12f2')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-aeacf7ab-250b-44ad-a1dc-dc6a950c12f2 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"MolWt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 168.2334533714981,\n        \"min\": 180.15899999999996,\n        \"max\": 639.0650000000002,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          314.36199999999997,\n          336.3840000000002,\n          639.0650000000002\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumAtoms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 11,\n        \"max\": 47,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          22,\n          24,\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumBonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 47,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          24,\n          10,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumHeteroatoms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5,\n          6,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumRotatableBonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          10,\n          23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TPSA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.94959612384702,\n        \"min\": 20.23,\n        \"max\": 78.9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          60.44,\n          78.9,\n          20.23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LogP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.951144905226204,\n        \"min\": 0.5109999999999999,\n        \"max\": 14.986399999999962,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.5577000000000005,\n          3.143600000000002,\n          14.986399999999962\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumRings\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one\",\n          \"2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,2-dicarboxylate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smiles\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3\",\n          \"CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -2.0448684692382812,\n          -1.5117712020874023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"y\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -2.919463872909546,\n          -4.117506980895996\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x3\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.498171806335449,\n          7.824473857879639\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"y3\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.430717468261719,\n          4.856132984161377\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"z3\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3185495138168335,\n          0.3992554247379303\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"5b6fc748"},"source":["## Visualize 2d and 3d projections\n","\n","### Subtask:\n","Visualize the 2D and 3D projections of the chemical compounds using interactive plots.\n"]},{"cell_type":"markdown","metadata":{"id":"d1053ef7"},"source":["**Reasoning**:\n","Generate the code to create and display the 2D and 3D interactive scatter plots using plotly.express, including the specified features for text labels and hover data.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"26827cf4","executionInfo":{"status":"ok","timestamp":1758220775409,"user_tz":-720,"elapsed":557,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"9865a72d-ea5b-4b62-8244-e8ee43a0cd06"},"source":["# Create interactive 2D scatter plot\n","fig_2d = px.scatter(\n","    df, x=\"x\", y=\"y\",\n","    text=\"name\",\n","    hover_data=[\"smiles\", \"MolWt\", \"NumAtoms\", \"LogP\"],\n","    title=\"Chemical Compounds Mapped Geometrically - 2D UMAP Projection\",\n","    width=800, height=800\n",")\n","\n","# Customize 2D plot appearance (optional but can match previous style)\n","fig_2d.update_layout(\n","    xaxis=dict(title=\"Geometric Dimension 1\"),\n","    yaxis=dict(title=\"Geometric Dimension 2\"),\n","    plot_bgcolor='rgba(0,0,0,0.05)',\n","    paper_bgcolor='white'\n",")\n","fig_2d.update_traces(textposition='top center', marker=dict(size=12))\n","\n","\n","# Create interactive 3D scatter plot\n","fig_3d = px.scatter_3d(\n","    df, x=\"x3\", y=\"y3\", z=\"z3\",\n","    text=\"name\",\n","    hover_data=[\"smiles\", \"MolWt\", \"NumAtoms\", \"LogP\"],\n","    title=\"Chemical Compounds Mapped Geometrically - 3D UMAP Projection\",\n","    width=800, height=800\n",")\n","\n","# Customize 3D plot appearance\n","fig_3d.update_layout(\n","    scene = dict(\n","        xaxis_title='Geometric Dimension 1 (3D)',\n","        yaxis_title='Geometric Dimension 2 (3D)',\n","        zaxis_title='Geometric Dimension 3 (3D)'),\n","    margin=dict(l=0, r=0, b=0, t=40)\n",")\n","fig_3d.update_traces(textposition='top center', marker=dict(size=8))\n","\n","\n","# Display both plots\n","print(\"✅ Displaying 2D and 3D UMAP Projections:\")\n","fig_2d.show()\n","fig_3d.show()"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Displaying 2D and 3D UMAP Projections:\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"de20a625-9839-4e10-ba28-2a7f9dbab2ac\" class=\"plotly-graph-div\" style=\"height:800px; width:800px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"de20a625-9839-4e10-ba28-2a7f9dbab2ac\")) {                    Plotly.newPlot(                        \"de20a625-9839-4e10-ba28-2a7f9dbab2ac\",                        [{\"customdata\":[[\"CC(=O)OC1=CC=CC=C1C(=O)O\",180.15899999999996,13,1.3101],[\"CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3\",314.36199999999997,22,2.5577000000000005],[\"CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCC1=CC=CC=C1O)C)C)C)C)C)C)C)C\",639.0650000000002,47,14.986399999999962],[\"C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-]\",340.708,11,0.5109999999999999],[\"CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC\",336.3840000000002,24,3.143600000000002],[\"CCCCCCCCCCCCCCCC(C(COP(=O)(O)O)N)O\",381.49399999999997,25,4.265200000000005],[\"C1=NC(=C2C(=N1)N(C=N2)C3C(C(C(O3)COP(=O)(O)OP(=O)(O)OP(=O)(O)O)O)O)N\",507.18200000000013,31,-1.6290000000000004],[\"CC(C)(COP(=O)(O)OP(=O)(O)OCC1C(C(C(O1)N2C=NC3=C(N=CN=C32)N)O)OP(=O)(O)O)C(C(=O)NCCC(=O)NCCCC(=O)O)O\",793.5100000000001,51,-1.7302999999999953]],\"hovertemplate\":\"x=%{x}\\u003cbr\\u003ey=%{y}\\u003cbr\\u003ename=%{text}\\u003cbr\\u003esmiles=%{customdata[0]}\\u003cbr\\u003eMolWt=%{customdata[1]}\\u003cbr\\u003eNumAtoms=%{customdata[2]}\\u003cbr\\u003eLogP=%{customdata[3]}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\",\"size\":12},\"mode\":\"markers+text\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"text\":[\"2-acetyloxybenzoic acid\",\"3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one\",\"2-(3,7,11,15,19,23,27,31-octamethyldotriaconta-2,6,10,14,18,22,26,30-octaenyl)phenol\",\"CID_5933\",\"2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,2-dicarboxylate\",\"(2-amino-3-hydroxyoctadecyl) dihydrogen phosphate\",\"[[(2R,3S,4R,5R)-5-(6-aminopurin-9-yl)-3,4-dihydroxyoxolan-2-yl]methoxy-hydroxyphosphoryl] phosphono hydrogen phosphate\",\"4-[3-[[4-[[[5-(6-aminopurin-9-yl)-4-hydroxy-3-phosphonooxyoxolan-2-yl]methoxy-hydroxyphosphoryl]oxy-hydroxyphosphoryl]oxy-2-hydroxy-3,3-dimethylbutanoyl]amino]propanoylamino]butanoic acid\"],\"x\":[-2.149322,-2.0448685,-1.414256,-2.5404992,-1.5117712,-0.9240458,-2.155325,-1.8984363],\"xaxis\":\"x\",\"y\":[-3.8874893,-2.9194639,-5.357307,-4.4179015,-4.117507,-4.7746954,-2.0453236,-1.4816201],\"yaxis\":\"y\",\"type\":\"scatter\",\"textposition\":\"top center\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Geometric Dimension 1\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Geometric Dimension 2\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Chemical Compounds Mapped Geometrically - 2D UMAP Projection\"},\"height\":800,\"width\":800,\"plot_bgcolor\":\"rgba(0,0,0,0.05)\",\"paper_bgcolor\":\"white\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('de20a625-9839-4e10-ba28-2a7f9dbab2ac');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"7120ed69-c977-4e73-af98-3f1fd658d88a\" class=\"plotly-graph-div\" style=\"height:800px; width:800px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"7120ed69-c977-4e73-af98-3f1fd658d88a\")) {                    Plotly.newPlot(                        \"7120ed69-c977-4e73-af98-3f1fd658d88a\",                        [{\"customdata\":[[\"CC(=O)OC1=CC=CC=C1C(=O)O\",180.15899999999996,13,1.3101],[\"CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3\",314.36199999999997,22,2.5577000000000005],[\"CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCC1=CC=CC=C1O)C)C)C)C)C)C)C)C\",639.0650000000002,47,14.986399999999962],[\"C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-]\",340.708,11,0.5109999999999999],[\"CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC\",336.3840000000002,24,3.143600000000002],[\"CCCCCCCCCCCCCCCC(C(COP(=O)(O)O)N)O\",381.49399999999997,25,4.265200000000005],[\"C1=NC(=C2C(=N1)N(C=N2)C3C(C(C(O3)COP(=O)(O)OP(=O)(O)OP(=O)(O)O)O)O)N\",507.18200000000013,31,-1.6290000000000004],[\"CC(C)(COP(=O)(O)OP(=O)(O)OCC1C(C(C(O1)N2C=NC3=C(N=CN=C32)N)O)OP(=O)(O)O)C(C(=O)NCCC(=O)NCCCC(=O)O)O\",793.5100000000001,51,-1.7302999999999953]],\"hovertemplate\":\"x3=%{x}\\u003cbr\\u003ey3=%{y}\\u003cbr\\u003ez3=%{z}\\u003cbr\\u003ename=%{text}\\u003cbr\\u003esmiles=%{customdata[0]}\\u003cbr\\u003eMolWt=%{customdata[1]}\\u003cbr\\u003eNumAtoms=%{customdata[2]}\\u003cbr\\u003eLogP=%{customdata[3]}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\",\"size\":8},\"mode\":\"markers+text\",\"name\":\"\",\"scene\":\"scene\",\"showlegend\":false,\"text\":[\"2-acetyloxybenzoic acid\",\"3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one\",\"2-(3,7,11,15,19,23,27,31-octamethyldotriaconta-2,6,10,14,18,22,26,30-octaenyl)phenol\",\"CID_5933\",\"2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,2-dicarboxylate\",\"(2-amino-3-hydroxyoctadecyl) dihydrogen phosphate\",\"[[(2R,3S,4R,5R)-5-(6-aminopurin-9-yl)-3,4-dihydroxyoxolan-2-yl]methoxy-hydroxyphosphoryl] phosphono hydrogen phosphate\",\"4-[3-[[4-[[[5-(6-aminopurin-9-yl)-4-hydroxy-3-phosphonooxyoxolan-2-yl]methoxy-hydroxyphosphoryl]oxy-hydroxyphosphoryl]oxy-2-hydroxy-3,3-dimethylbutanoyl]amino]propanoylamino]butanoic acid\"],\"x\":[7.2054505,7.498172,6.8756466,7.2427335,7.824474,7.170616,7.16703,6.7686353],\"y\":[5.5109158,6.4307175,4.469089,5.2093916,4.856133,4.8838267,7.1642833,7.407049],\"z\":[0.24961215,0.3185495,0.7329407,-0.36257368,0.39925542,1.0848314,0.6279295,1.0844135],\"type\":\"scatter3d\",\"textposition\":\"top center\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"scene\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"xaxis\":{\"title\":{\"text\":\"Geometric Dimension 1 (3D)\"}},\"yaxis\":{\"title\":{\"text\":\"Geometric Dimension 2 (3D)\"}},\"zaxis\":{\"title\":{\"text\":\"Geometric Dimension 3 (3D)\"}}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Chemical Compounds Mapped Geometrically - 3D UMAP Projection\"},\"height\":800,\"width\":800,\"margin\":{\"l\":0,\"r\":0,\"b\":0,\"t\":40}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('7120ed69-c977-4e73-af98-3f1fd658d88a');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"e110d17e"},"source":["## Implement resonance detection\n","\n","### Subtask:\n","Develop code to identify compounds with geometric distances close to specific values (e.g., π, φ, √2).\n"]},{"cell_type":"markdown","metadata":{"id":"cba316f0"},"source":["**Reasoning**:\n","Implement the resonance detection logic by calculating pairwise distances between compounds in 2D space and comparing them to target resonance values within a tolerance.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ff2cc285","executionInfo":{"status":"ok","timestamp":1758220805682,"user_tz":-720,"elapsed":95,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"4cb9c043-7aa2-46b3-8335-6e2ba1a61c6b"},"source":["import math\n","from scipy.spatial.distance import pdist, squareform\n","\n","# Define target resonance values\n","resonance_values = {\n","    \"Pi\": math.pi,\n","    \"Golden Ratio (Phi)\": (1 + math.sqrt(5)) / 2,\n","    \"Sqrt(2)\": math.sqrt(2),\n","}\n","\n","# Define tolerance for resonance detection\n","tolerance = 0.1 # Adjust as needed\n","\n","print(\"\\n🔍 DETECTING GEOMETRIC RESONANCES IN 2D PROJECTION\")\n","print(\"=\"*60)\n","\n","# Get 2D coordinates and names\n","coords_2d = df[[\"x\", \"y\"]].values\n","names = df[\"name\"].values\n","\n","# Compute pairwise distances in 2D\n","dist_matrix_2d = squareform(pdist(coords_2d))\n","\n","detected_resonances = []\n","\n","# Iterate through all unique pairs of compounds\n","for i in range(len(names)):\n","    for j in range(i + 1, len(names)):\n","        compound1_name = names[i]\n","        compound2_name = names[j]\n","        distance = dist_matrix_2d[i, j]\n","\n","        # Compare distance to each resonance value\n","        for res_name, res_value in resonance_values.items():\n","            if abs(distance - res_value) < tolerance:\n","                detected_resonances.append({\n","                    \"Compound 1\": compound1_name,\n","                    \"Compound 2\": compound2_name,\n","                    \"Detected Resonance\": res_name,\n","                    \"Distance\": distance,\n","                    \"Target Value\": res_value,\n","                    \"Difference\": abs(distance - res_value)\n","                })\n","\n","# Print summary of detected resonance relationships\n","if detected_resonances:\n","    print(f\"Found {len(detected_resonances)} potential geometric resonance relationships (2D):\")\n","    for res in detected_resonances:\n","        print(f\"  → {res['Compound 1']} <-> {res['Compound 2']} (Distance: {res['Distance']:.3f}) is close to {res['Detected Resonance']} ({res['Target Value']:.3f})\")\n","else:\n","    print(\"No geometric resonance relationships found within the specified tolerance (2D).\")\n","\n","# Optional: Implement similar check for 3D distances if 'x3', 'y3', 'z3' exist\n","if all(col in df.columns for col in [\"x3\", \"y3\", \"z3\"]):\n","    print(\"\\n🔍 DETECTING GEOMETRIC RESONANCES IN 3D PROJECTION\")\n","    print(\"=\"*60)\n","\n","    # Get 3D coordinates\n","    coords_3d = df[[\"x3\", \"y3\", \"z3\"]].values\n","\n","    # Compute pairwise distances in 3D\n","    dist_matrix_3d = squareform(pdist(coords_3d))\n","\n","    detected_resonances_3d = []\n","\n","    # Iterate through all unique pairs of compounds\n","    for i in range(len(names)):\n","        for j in range(i + 1, len(names)):\n","            compound1_name = names[i]\n","            compound2_name = names[j]\n","            distance_3d = dist_matrix_3d[i, j]\n","\n","            # Compare distance to each resonance value\n","            for res_name, res_value in resonance_values.items():\n","                if abs(distance_3d - res_value) < tolerance:\n","                    detected_resonances_3d.append({\n","                        \"Compound 1\": compound1_name,\n","                        \"Compound 2\": compound2_name,\n","                        \"Detected Resonance\": res_name,\n","                        \"Distance (3D)\": distance_3d,\n","                        \"Target Value\": res_value,\n","                        \"Difference\": abs(distance_3d - res_value)\n","                    })\n","\n","    if detected_resonances_3d:\n","        print(f\"Found {len(detected_resonances_3d)} potential geometric resonance relationships (3D):\")\n","        for res in detected_resonances_3d:\n","            print(f\"  → {res['Compound 1']} <-> {res['Compound 2']} (Distance: {res['Distance (3D)']:.3f}) is close to {res['Detected Resonance']} ({res['Target Value']:.3f})\")\n","    else:\n","        print(\"No geometric resonance relationships found within the specified tolerance (3D).\")\n"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","🔍 DETECTING GEOMETRIC RESONANCES IN 2D PROJECTION\n","============================================================\n","Found 6 potential geometric resonance relationships (2D):\n","  → 2-acetyloxybenzoic acid <-> 2-(3,7,11,15,19,23,27,31-octamethyldotriaconta-2,6,10,14,18,22,26,30-octaenyl)phenol (Distance: 1.643) is close to Golden Ratio (Phi) (1.618)\n","  → 2-acetyloxybenzoic acid <-> (2-amino-3-hydroxyoctadecyl) dihydrogen phosphate (Distance: 1.513) is close to Sqrt(2) (1.414)\n","  → 3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one <-> CID_5933 (Distance: 1.578) is close to Golden Ratio (Phi) (1.618)\n","  → 3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one <-> 4-[3-[[4-[[[5-(6-aminopurin-9-yl)-4-hydroxy-3-phosphonooxyoxolan-2-yl]methoxy-hydroxyphosphoryl]oxy-hydroxyphosphoryl]oxy-2-hydroxy-3,3-dimethylbutanoyl]amino]propanoylamino]butanoic acid (Distance: 1.445) is close to Sqrt(2) (1.414)\n","  → 2-(3,7,11,15,19,23,27,31-octamethyldotriaconta-2,6,10,14,18,22,26,30-octaenyl)phenol <-> CID_5933 (Distance: 1.467) is close to Sqrt(2) (1.414)\n","  → CID_5933 <-> (2-amino-3-hydroxyoctadecyl) dihydrogen phosphate (Distance: 1.655) is close to Golden Ratio (Phi) (1.618)\n","\n","🔍 DETECTING GEOMETRIC RESONANCES IN 3D PROJECTION\n","============================================================\n","Found 6 potential geometric resonance relationships (3D):\n","  → 2-acetyloxybenzoic acid <-> [[(2R,3S,4R,5R)-5-(6-aminopurin-9-yl)-3,4-dihydroxyoxolan-2-yl]methoxy-hydroxyphosphoryl] phosphono hydrogen phosphate (Distance: 1.697) is close to Golden Ratio (Phi) (1.618)\n","  → 3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one <-> CID_5933 (Distance: 1.422) is close to Sqrt(2) (1.414)\n","  → 3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one <-> 2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,2-dicarboxylate (Distance: 1.610) is close to Golden Ratio (Phi) (1.618)\n","  → 3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one <-> 4-[3-[[4-[[[5-(6-aminopurin-9-yl)-4-hydroxy-3-phosphonooxyoxolan-2-yl]methoxy-hydroxyphosphoryl]oxy-hydroxyphosphoryl]oxy-2-hydroxy-3,3-dimethylbutanoyl]amino]propanoylamino]butanoic acid (Distance: 1.439) is close to Sqrt(2) (1.414)\n","  → 2-(3,7,11,15,19,23,27,31-octamethyldotriaconta-2,6,10,14,18,22,26,30-octaenyl)phenol <-> CID_5933 (Distance: 1.372) is close to Sqrt(2) (1.414)\n","  → CID_5933 <-> (2-amino-3-hydroxyoctadecyl) dihydrogen phosphate (Distance: 1.485) is close to Sqrt(2) (1.414)\n"]}]},{"cell_type":"markdown","metadata":{"id":"755fec23"},"source":["## Connect to ubp (optional)\n","\n","### Subtask:\n","Explore ways to assign biological meaning to the observed geometric patterns.\n"]},{"cell_type":"markdown","metadata":{"id":"a83c396f"},"source":["**Reasoning**:\n","Review the previous outputs to understand the identified geometric patterns and brainstorm potential biological correlations based on the compound names.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e5a4a654","executionInfo":{"status":"ok","timestamp":1758220826040,"user_tz":-720,"elapsed":51,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"c65eaa76-600b-47ed-e2bf-157268e83c52"},"source":["# Review identified patterns from previous steps (from stdout/stderr and variable values)\n","# Equilateral Triads (2D): Water, Serotonin, Nicotine | Caffeine, Serotonin, Nicotine | Aspirin, Dopamine, Nicotine | ATP, Penicillin G, Lycopene | ATP, Penicillin G, Curcumin | ATP, Lycopene, Curcumin | Penicillin G, Lycopene, Curcumin\n","# Collinear Triples (Approximate 2D): (Numerous pairs listed in stdout, e.g., Water, Aspirin, Serotonin)\n","# Resonance Relationships (2D & 3D): (Pairs listed in stdout with distances near Pi, Golden Ratio, Sqrt(2))\n","\n","print(\"Review of Identified Geometric Patterns:\")\n","print(\"Equilateral Triangles (2D): Synergistic groups hypothesis.\")\n","print(\"Approximate Collinear Triples (2D): Linear pathways or cascades hypothesis.\")\n","print(\"Resonance Relationships (2D & 3D): Potential for specific interaction types (synergistic/antagonistic) based on fundamental ratios hypothesis.\")\n","\n","# Brainstorm potential biological correlations (based on compound names and general biological knowledge)\n","# - Water: Universal solvent, involved in all biological processes.\n","# - Glucose: Primary energy source.\n","# - Caffeine: Stimulant, affects central nervous system.\n","# - Aspirin: Pain reliever, anti-inflammatory, affects prostaglandin synthesis.\n","# - Dopamine: Neurotransmitter, reward and pleasure pathways.\n","# - Serotonin: Neurotransmitter, mood, sleep, appetite regulation.\n","# - ATP: Primary energy currency of the cell.\n","# - Penicillin G: Antibiotic, inhibits bacterial cell wall synthesis.\n","# - Lycopene: Antioxidant, found in plants.\n","# - Melatonin: Hormone, sleep-wake cycle regulation.\n","# - Nicotine: Stimulant, addictive, affects acetylcholine receptors.\n","# - Curcumin: Anti-inflammatory, antioxidant, found in turmeric.\n","\n","print(\"\\nBrainstorming Biological Correlations:\")\n","print(\"- Consider compounds within a geometric pattern: Do they share similar targets, pathways, or effects?\")\n","print(\"  - Example: Dopamine and Serotonin are both neurotransmitters. Are they geometrically close or in a relationship?\")\n","print(\"  - Example: Aspirin has anti-inflammatory effects. Are other anti-inflammatory compounds geometrically related?\")\n","print(\"  - Example: ATP is energy. Are compounds involved in energy metabolism geometrically linked?\")\n","\n","# Formulate hypotheses (based on the small sample and observed patterns)\n","print(\"\\nFormulating Hypotheses:\")\n","print(\"Hypothesis 1 (Triangles): Compounds forming approximate equilateral triangles in the geometric space may exhibit synergistic biological activity or participate in closely related biological processes.\")\n","print(\"  - E.g., Water, Serotonin, Nicotine triangle: Could hydration (Water) influence neurotransmitter activity (Serotonin, Nicotine)? (Weak hypothesis with this small sample)\")\n","print(\"  - E.g., ATP, Penicillin G, Lycopene/Curcumin triangles: Could energy metabolism (ATP) interact with antibiotic action (Penicillin G) or antioxidant effects (Lycopene/Curcumin)?\")\n","\n","print(\"Hypothesis 2 (Collinearity): Compounds forming approximate collinear triples may represent steps in a biological pathway or cascade, or have dose-dependent related effects.\")\n","print(\"  - E.g., Water, Aspirin, Serotonin line: Could suggest a sequence of effects or interactions.\")\n","\n","print(\"Hypothesis 3 (Resonance): Compounds with geometric distances near fundamental constants (π, φ, √2) might have specific types of interactions, potentially related to binding affinity, reaction rates, or emergent properties.\")\n","print(\"  - E.g., if two compounds targeting the same receptor show a resonance distance, it might indicate competitive binding or allosteric effects.\")\n","\n","# Outline potential future steps/experiments\n","print(\"\\nPotential Future Steps and Experiments:\")\n","print(\"1. Expand the dataset: Include a much larger and more diverse set of compounds with known biological activity (e.g., compounds targeting the same protein family, compounds in the same metabolic pathway).\")\n","print(\"2. Integrate biological data: Obtain quantitative biological data (e.g., IC50 values, binding affinities, pathway activity levels) for the compounds.\")\n","print(\"3. Correlate geometry with biology: Statistically test the hypotheses. Do compounds in triangles share biological targets more often than random chance? Do compounds in collinear relationships show sequential effects in biological assays? Do resonance distances correlate with specific types of drug-drug interactions or binding modes?\")\n","print(\"4. Use biological data as features: Incorporate biological data directly into the feature set before dimensionality reduction to see if geometric patterns become more biologically meaningful.\")\n","print(\"5. Develop metrics: Create quantitative metrics to assess the 'biological relevance' of a geometric pattern.\")\n","print(\"6. Machine Learning: Train models to predict biological relationships based on geometric patterns.\")\n","print(\"7. Experimental Validation: Design and perform targeted experiments based on the strongest geometric-biological correlations observed (e.g., test for synergy in triangle members, investigate pathway dynamics for collinear compounds).\")\n","print(\"8. Explore different dimensionality reduction techniques and their parameters to see if different projections reveal different biologically relevant patterns.\")\n"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Review of Identified Geometric Patterns:\n","Equilateral Triangles (2D): Synergistic groups hypothesis.\n","Approximate Collinear Triples (2D): Linear pathways or cascades hypothesis.\n","Resonance Relationships (2D & 3D): Potential for specific interaction types (synergistic/antagonistic) based on fundamental ratios hypothesis.\n","\n","Brainstorming Biological Correlations:\n","- Consider compounds within a geometric pattern: Do they share similar targets, pathways, or effects?\n","  - Example: Dopamine and Serotonin are both neurotransmitters. Are they geometrically close or in a relationship?\n","  - Example: Aspirin has anti-inflammatory effects. Are other anti-inflammatory compounds geometrically related?\n","  - Example: ATP is energy. Are compounds involved in energy metabolism geometrically linked?\n","\n","Formulating Hypotheses:\n","Hypothesis 1 (Triangles): Compounds forming approximate equilateral triangles in the geometric space may exhibit synergistic biological activity or participate in closely related biological processes.\n","  - E.g., Water, Serotonin, Nicotine triangle: Could hydration (Water) influence neurotransmitter activity (Serotonin, Nicotine)? (Weak hypothesis with this small sample)\n","  - E.g., ATP, Penicillin G, Lycopene/Curcumin triangles: Could energy metabolism (ATP) interact with antibiotic action (Penicillin G) or antioxidant effects (Lycopene/Curcumin)?\n","Hypothesis 2 (Collinearity): Compounds forming approximate collinear triples may represent steps in a biological pathway or cascade, or have dose-dependent related effects.\n","  - E.g., Water, Aspirin, Serotonin line: Could suggest a sequence of effects or interactions.\n","Hypothesis 3 (Resonance): Compounds with geometric distances near fundamental constants (π, φ, √2) might have specific types of interactions, potentially related to binding affinity, reaction rates, or emergent properties.\n","  - E.g., if two compounds targeting the same receptor show a resonance distance, it might indicate competitive binding or allosteric effects.\n","\n","Potential Future Steps and Experiments:\n","1. Expand the dataset: Include a much larger and more diverse set of compounds with known biological activity (e.g., compounds targeting the same protein family, compounds in the same metabolic pathway).\n","2. Integrate biological data: Obtain quantitative biological data (e.g., IC50 values, binding affinities, pathway activity levels) for the compounds.\n","3. Correlate geometry with biology: Statistically test the hypotheses. Do compounds in triangles share biological targets more often than random chance? Do compounds in collinear relationships show sequential effects in biological assays? Do resonance distances correlate with specific types of drug-drug interactions or binding modes?\n","4. Use biological data as features: Incorporate biological data directly into the feature set before dimensionality reduction to see if geometric patterns become more biologically meaningful.\n","5. Develop metrics: Create quantitative metrics to assess the 'biological relevance' of a geometric pattern.\n","6. Machine Learning: Train models to predict biological relationships based on geometric patterns.\n","7. Experimental Validation: Design and perform targeted experiments based on the strongest geometric-biological correlations observed (e.g., test for synergy in triangle members, investigate pathway dynamics for collinear compounds).\n","8. Explore different dimensionality reduction techniques and their parameters to see if different projections reveal different biologically relevant patterns.\n"]}]},{"cell_type":"markdown","metadata":{"id":"f73dfcad"},"source":["## Summary:\n","\n","### Data Analysis Key Findings\n","\n","*   Real compound data (names and SMILES) for a small set of diverse compounds were successfully fetched from PubChem using the `pubchempy` library.\n","*   Molecular features were computed for the real compounds using the `compute_features` function and stored in a pandas DataFrame.\n","*   The computed features were successfully projected into 2D and 3D space using UMAP dimensionality reduction.\n","*   Interactive 2D and 3D scatter plots were generated using Plotly Express, visualizing the projected compounds with names as labels and including hover data for SMILES, MolWt, NumAtoms, and LogP.\n","*   Code was developed to calculate pairwise distances between compounds in both 2D and 3D projection spaces and identify pairs with distances close to predefined \"resonance\" values (Pi, Golden Ratio, Sqrt(2)) within a specified tolerance.\n","*   Specific pairs of compounds were identified as having distances close to the target resonance values in both 2D and 3D projections based on the small sample dataset.\n","*   Preliminary hypotheses were formulated suggesting potential biological meanings for observed geometric patterns, such as synergy for compounds forming triangles, pathway relationships for collinear compounds, and specific interaction types for compounds with resonance distances.\n","\n","### Insights or Next Steps\n","\n","*   Expand the dataset significantly to include a larger and more diverse set of compounds with known biological activities to increase the statistical power and biological relevance of the geometric patterns.\n","*   Integrate quantitative biological data (e.g., binding affinities, IC50 values, pathway activity) directly into the analysis, potentially using it as features for dimensionality reduction or for statistically correlating geometric patterns with biological outcomes.\n"]},{"cell_type":"code","source":[],"metadata":{"id":"HnElI0iCIe4m"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d2d66260"},"source":["# Task\n","Expand the dataset significantly to include a larger and more diverse set of compounds with known biological activities and integrate quantitative biological data (e.g., binding affinities, IC50 values, pathway activity) directly into the analysis."]},{"cell_type":"markdown","metadata":{"id":"01447d02"},"source":["## Expand the dataset\n","\n","### Subtask:\n","Generate code to fetch a larger and more diverse set of compounds with known biological activities from a chemical database.\n"]},{"cell_type":"markdown","metadata":{"id":"d6720284"},"source":["**Reasoning**:\n","Use the `pubchempy` library to perform keyword searches for compounds related to specific biological activities to obtain a larger and more diverse dataset, then store the results in the desired format and replace the existing `sample_compounds` list.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"10158e51","executionInfo":{"status":"ok","timestamp":1758220962690,"user_tz":-720,"elapsed":1539,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"9faaa874-5181-4367-d18c-653bb93b39c8"},"source":["import pubchempy as pcp\n","\n","# Keywords for searching PubChem for diverse compounds\n","keywords = [\n","    \"kinase inhibitor\",\n","    \"GPCR agonist\",\n","    \"antibiotic\",\n","    \"antiviral\",\n","    \"anti-inflammatory\",\n","    \"neurotransmitter\",\n","    \"vitamins\",\n","    \"amino acids\"\n","]\n","\n","# Fetch compounds for each keyword (limit the number of compounds per keyword to get diversity)\n","fetched_compounds_data = []\n","for keyword in keywords:\n","    print(f\"Searching for compounds related to: {keyword}\")\n","    try:\n","        # Search PubChem by keyword and limit the number of results per keyword\n","        cids = pcp.get_cids(keyword, searchtype='keyword', listkey_count=50) # Fetch up to 50 CIDs per keyword\n","        if cids:\n","            # Fetch compound details in batches\n","            for i in range(0, len(cids), 100): # Process in batches of 100\n","                batch_cids = cids[i:i+100]\n","                compounds = pcp.get_compounds(batch_cids, 'cid')\n","                for compound in compounds:\n","                    # Only add if canonical_smiles is available and not already in the list\n","                    if compound.canonical_smiles and compound.cid not in [c.cid for c in fetched_compounds_data]:\n","                         # Store the full compound object temporarily to avoid duplicates by CID\n","                        fetched_compounds_data.append(compound)\n","        else:\n","            print(f\"  No compounds found for keyword: {keyword}\")\n","    except Exception as e:\n","        print(f\"  Error fetching compounds for keyword {keyword}: {e}\")\n","\n","# Convert the fetched compound objects to the desired dictionary format\n","real_compounds_data = []\n","for compound in fetched_compounds_data:\n","    # Use IUPAC name if available, otherwise use the first synonym or CID\n","    name = compound.iupac_name or (compound.synonyms[0] if compound.synonyms else f\"CID_{compound.cid}\")\n","    real_compounds_data.append({\n","        \"name\": name,\n","        \"smiles\": compound.canonical_smiles\n","    })\n","\n","\n","# Replace sample_compounds with the newly fetched real data\n","sample_compounds = real_compounds_data\n","\n","print(f\"\\n✅ Fetched a larger set of {len(sample_compounds)} real compounds from PubChem.\")\n","print(\"Displaying the first 10 entries:\")\n","for i, comp in enumerate(sample_compounds[:10]):\n","    print(f\"  - {comp['name']} ({comp['smiles']})\")\n"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Searching for compounds related to: kinase inhibitor\n","  Error fetching compounds for keyword kinase inhibitor: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","Searching for compounds related to: GPCR agonist\n","  Error fetching compounds for keyword GPCR agonist: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","Searching for compounds related to: antibiotic\n","  Error fetching compounds for keyword antibiotic: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","Searching for compounds related to: antiviral\n","  Error fetching compounds for keyword antiviral: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","Searching for compounds related to: anti-inflammatory\n","  Error fetching compounds for keyword anti-inflammatory: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","Searching for compounds related to: neurotransmitter\n","  Error fetching compounds for keyword neurotransmitter: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","Searching for compounds related to: vitamins\n","  Error fetching compounds for keyword vitamins: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","Searching for compounds related to: amino acids\n","  Error fetching compounds for keyword amino acids: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","\n","✅ Fetched a larger set of 0 real compounds from PubChem.\n","Displaying the first 10 entries:\n"]}]},{"cell_type":"markdown","metadata":{"id":"0071088e"},"source":["**Reasoning**:\n","The previous attempt to fetch compounds using keyword search failed due to an unrecognized identifier namespace error. A more robust approach is to search by MeSH terms or other supported identifiers that are more directly linked to biological activities or categories within PubChem.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5d4dbc51","executionInfo":{"status":"ok","timestamp":1758220975454,"user_tz":-720,"elapsed":761,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"346d59db-6aee-49ba-cf36-93c9334ad7a9"},"source":["import pubchempy as pcp\n","\n","# Use supported search types like MeSH terms or Categories\n","search_queries = [\n","    (\"Antibiotics\", 'mesh'),\n","    (\"Antineoplastic Agents\", 'mesh'),\n","    (\"Neurotransmitter Agents\", 'mesh'),\n","    (\"Vitamins\", 'category'),\n","    (\"Amino Acids\", 'category')\n","]\n","\n","# Fetch compounds based on the search queries\n","fetched_compounds_data = []\n","fetched_cids = set() # Use a set to track fetched CIDs and avoid duplicates\n","\n","print(\"Searching PubChem using supported search types...\")\n","\n","for query, search_type in search_queries:\n","    print(f\"Searching for compounds related to: {query} ({search_type})\")\n","    try:\n","        # Use get_cids with the specified search_type\n","        # Limit the total number of CIDs to avoid excessively long fetches\n","        cids = pcp.get_cids(query, searchtype=search_type, listkey_count=100) # Fetch up to 100 CIDs per query\n","        if cids:\n","            # Filter out CIDs already fetched\n","            new_cids = [cid for cid in cids if cid not in fetched_cids]\n","            if new_cids:\n","                print(f\"  Found {len(new_cids)} new compounds (total {len(fetched_cids) + len(new_cids)}). Fetching details...\")\n","                # Fetch compound details in batches\n","                for i in range(0, len(new_cids), 100):\n","                    batch_cids = new_cids[i:i+100]\n","                    compounds = pcp.get_compounds(batch_cids, 'cid')\n","                    for compound in compounds:\n","                         # Use connectivity_smiles as canonical_smiles is deprecated\n","                        if compound.connectivity_smiles:\n","                            fetched_compounds_data.append(compound)\n","                            fetched_cids.add(compound.cid) # Add CID to the set\n","            else:\n","                 print(f\"  No new compounds found for query: {query}\")\n","        else:\n","            print(f\"  No compounds found for query: {query}\")\n","    except Exception as e:\n","        print(f\"  Error fetching compounds for query {query}: {e}\")\n","\n","# Convert the fetched compound objects to the desired dictionary format\n","real_compounds_data = []\n","for compound in fetched_compounds_data:\n","    # Use IUPAC name if available, otherwise use the first synonym or CID\n","    name = compound.iupac_name or (compound.synonyms[0] if compound.synonyms else f\"CID_{compound.cid}\")\n","    real_compounds_data.append({\n","        \"name\": name,\n","        # Use connectivity_smiles as canonical_smiles is deprecated\n","        \"smiles\": compound.connectivity_smiles\n","    })\n","\n","# Replace sample_compounds with the newly fetched real data\n","sample_compounds = real_compounds_data\n","\n","print(f\"\\n✅ Fetched a larger set of {len(sample_compounds)} real compounds from PubChem.\")\n","print(\"Displaying the first 10 entries:\")\n","for i, comp in enumerate(sample_compounds[:10]):\n","    print(f\"  - {comp['name']} ({comp['smiles']})\")\n"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Searching PubChem using supported search types...\n","Searching for compounds related to: Antibiotics (mesh)\n","  Error fetching compounds for query Antibiotics: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","Searching for compounds related to: Antineoplastic Agents (mesh)\n","  Error fetching compounds for query Antineoplastic Agents: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","Searching for compounds related to: Neurotransmitter Agents (mesh)\n","  Error fetching compounds for query Neurotransmitter Agents: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","Searching for compounds related to: Vitamins (category)\n","  Error fetching compounds for query Vitamins: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","Searching for compounds related to: Amino Acids (category)\n","  Error fetching compounds for query Amino Acids: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","\n","✅ Fetched a larger set of 0 real compounds from PubChem.\n","Displaying the first 10 entries:\n"]}]},{"cell_type":"markdown","metadata":{"id":"ab0dfc18"},"source":["**Reasoning**:\n","The previous attempts to fetch compounds using keyword, MeSH, and category searches resulted in \"Unrecognized identifier namespace\" errors, indicating that the `pubchempy` version or the PUG REST API endpoint being used might not support these direct search types in the way intended, or there's a fundamental misunderstanding of the search API parameters. A more reliable method to get compounds related to biological activities, while staying within the constraints of fetching a larger, diverse set, is to search for compounds by known biological targets (e.g., protein names or Gene IDs), or by known drug names within therapeutic categories. Since direct target search also might hit similar issues, let's try fetching compounds from a specific therapeutic category using a more general search approach or by retrieving CIDs known to belong to certain therapeutic classes if `pubchempy` supports it. If direct search by biological classification is consistently failing, an alternative is to fetch compounds based on properties or common substructures related to these classes, or simply fetch a large list of CIDs from a known list (if available) and then retrieve their details. Given the persistent \"Unrecognized identifier namespace\" error across different search types, it's likely a limitation of the `pubchempy` search function's interaction with the current API. Let's try a different approach: fetching a large number of CIDs known to be associated with drugs or biologically active compounds by searching for a very broad term or category that is likely to return a large list of diverse CIDs, and then filtering them later if needed. If even broad searches fail, we might need to resort to a different method like querying a different database or using pre-compiled lists of CIDs. Let's try a very broad search like \"drug\" or a general category that should exist. If that fails, fetching CIDs directly from a known list (if we had one) would be the next step, but without such a list, we are limited by the search capabilities. Let's attempt a broad search for \"drug\" and see if it yields any CIDs. If this also fails, the `pubchempy` search functionality as used is not working as expected for any search type, and we would need to explore other ways to get a list of CIDs or switch to a different library or API method if the goal is specifically to fetch compounds based on biological activity. For this subtask, the goal is simply to get a *larger and more diverse* set than the initial small sample, which doesn't strictly require specific biological categories if direct search is problematic. Fetching a random large set of CIDs or CIDs from a very general category like \"Small Molecules\" might be a fallback to fulfill the \"larger and more diverse\" requirement, even if not specifically tied to biological activity keywords. Let's try fetching a large number of CIDs from a very general category like \"Chemicals\". If this works, we can proceed with computing features and projections on this larger set, fulfilling the subtask's primary requirement.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2dc9db8d","executionInfo":{"status":"ok","timestamp":1758220991670,"user_tz":-720,"elapsed":155,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"c84977e3-b8fb-4259-ff0e-b4cb8ecba036"},"source":["import pubchempy as pcp\n","\n","# Attempt to fetch a large number of compounds from a general category\n","# Using 'category' search type with a broad term like 'Chemicals'\n","# If 'category' search is still problematic, this might fail.\n","# Let's try fetching CIDs from a very broad search term like \"compound\"\n","# If 'keyword' search is problematic, this might fail too.\n","# A robust way might be to search by properties that are common in biologically active compounds,\n","# but that's more complex.\n","# Let's try fetching a large list of CIDs directly using a query that is known to work,\n","# e.g., searching for compounds with a certain molecular weight range, which is a property-based search.\n","# This bypasses keyword/category issues and focuses on getting a large list of *any* compounds.\n","\n","# Attempting to fetch a large number of CIDs based on a property search (e.g., Molecular Weight range)\n","# This is a workaround to get a large list of diverse compounds if keyword/category searches are broken.\n","# Molecular weight range for small drug-like molecules\n","min_mw = 150\n","max_mw = 600\n","num_cids_to_fetch = 500 # Target number of CIDs\n","\n","print(f\"Searching for compounds with Molecular Weight between {min_mw} and {max_mw}...\")\n","\n","try:\n","    # Search by property - this search type is generally reliable\n","    # We are not filtering by biological activity here, just getting a large set of diverse small molecules\n","    cids = pcp.get_cids(f'{min_mw}:{max_mw}', searchtype='MolecularWeight', listkey_count=num_cids_to_fetch)\n","\n","    fetched_compounds_data = []\n","    fetched_cids_set = set() # Use a set to track fetched CIDs\n","\n","    if cids:\n","        print(f\"  Found {len(cids)} compounds matching the criteria. Fetching details...\")\n","        # Fetch compound details in batches\n","        for i in range(0, len(cids), 100):\n","            batch_cids = cids[i:i+100]\n","            compounds = pcp.get_compounds(batch_cids, 'cid')\n","            for compound in compounds:\n","                # Use connectivity_smiles as canonical_smiles is deprecated and check for duplicates\n","                if compound.connectivity_smiles and compound.cid not in fetched_cids_set:\n","                    # Use IUPAC name if available, otherwise use the first synonym or CID\n","                    name = compound.iupac_name or (compound.synonyms[0] if compound.synonyms else f\"CID_{compound.cid}\")\n","                    fetched_compounds_data.append({\n","                        \"name\": name,\n","                        \"smiles\": compound.connectivity_smiles\n","                    })\n","                    fetched_cids_set.add(compound.cid) # Add CID to the set\n","        print(f\"  Successfully fetched details for {len(fetched_compounds_data)} unique compounds.\")\n","    else:\n","        print(\"  No compounds found matching the Molecular Weight criteria.\")\n","\n","except Exception as e:\n","    print(f\"  Error during property search or fetching details: {e}\")\n","    fetched_compounds_data = [] # Ensure the list is empty if fetching failed\n","\n","\n","# Replace sample_compounds with the newly fetched real data\n","sample_compounds = fetched_compounds_data\n","\n","print(f\"\\n✅ Fetched a larger set of {len(sample_compounds)} real compounds from PubChem.\")\n","if sample_compounds:\n","    print(\"Displaying the first 10 entries:\")\n","    for i, comp in enumerate(sample_compounds[:10]):\n","        print(f\"  - {comp['name']} ({comp['smiles']})\")\n","else:\n","    print(\"No compounds were fetched.\")\n"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Searching for compounds with Molecular Weight between 150 and 600...\n","  Error during property search or fetching details: PubChem HTTP Error 400 PUGREST.BadRequest: Unrecognized identifier namespace\n","\n","✅ Fetched a larger set of 0 real compounds from PubChem.\n","No compounds were fetched.\n"]}]},{"cell_type":"markdown","metadata":{"id":"33f2d366"},"source":["**Reasoning**:\n","All previous attempts to fetch compounds using various `pubchempy` search types have failed with an \"Unrecognized identifier namespace\" error. This strongly suggests a problem with how `pubchempy` is interacting with the current PubChem PUG REST API or a fundamental issue with the API itself for these search methods at this time. To complete the subtask of getting a larger and more diverse set of compounds, even if not specifically tied to biological activity via direct search, a different strategy is needed. Since direct searching is not working, the only way to get compound data is to fetch compounds by their known CIDs. We don't have a pre-compiled list of CIDs related to biological activity, but we can get a list of *any* CIDs if there's a search that works. Given the consistent failure of `get_cids`, the most reliable fallback to get *some* data is to fetch compounds based on a property that is unlikely to have namespace issues, or even just fetch a predefined list of diverse CIDs if `pubchempy` has a way to get a list without a search query (which is unlikely for a large number). Since property search also failed, let's try to fetch a small, fixed list of diverse compounds by their CIDs directly. This was done in the initial notebook, so we know it works. While this doesn't fulfill the \"larger\" requirement, it does fulfill the \"diverse\" requirement (relative to the initial tiny set) and, more importantly, allows us to proceed with the rest of the task (computing features, projections, etc.) on *some* real data, rather than being blocked by the fetching issue. If the goal is strictly a *larger* dataset fetched dynamically, and all `pubchempy` search methods are failing, then achieving the subtask within the current environment might be impossible without external data or a different library. However, let's prioritize getting *some* real, diverse data fetched successfully to continue the workflow. We will use a slightly expanded list of diverse CIDs compared to the initial sample.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"606808b9","executionInfo":{"status":"ok","timestamp":1758221006128,"user_tz":-720,"elapsed":737,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"7fc1452d-0a78-4376-e9e9-b81ba87dbb7c"},"source":["import pubchempy as pcp\n","\n","# Since direct search methods are failing, fetch a fixed list of diverse compounds by CID\n","# This is a fallback to get some real data and proceed with the rest of the task.\n","diverse_cids = [\n","    2244, # Aspirin\n","    5090, # Caffeine\n","    57,   # Water\n","    5933, # Glucose (Note: The original code had issues with this SMILES, let's keep it to see if the new fetch works better)\n","    6819, # Dopamine\n","    520,  # Serotonin\n","    5957, # Melatonin\n","    2573, # Nicotine\n","    6082, # Penicillin G\n","    5280437, # Lycopene (CID corrected from previous list)\n","    5317417, # Curcumin\n","    632,  # Ethanol\n","    3332, # Adenine\n","    6096, # Cholesterol\n","    444085, # Resveratrol\n","]\n","\n","print(f\"Fetching a diverse set of {len(diverse_cids)} compounds by CID...\")\n","\n","try:\n","    compounds = pcp.get_compounds(diverse_cids, 'cid')\n","\n","    # Extract name and SMILES (using connectivity_smiles) and store in the desired format\n","    real_compounds_data = []\n","    for compound in compounds:\n","        # Use connectivity_smiles as canonical_smiles is deprecated\n","        # Only add if connectivity_smiles is available\n","        if compound.connectivity_smiles:\n","             # Use IUPAC name if available, otherwise use the first synonym or CID\n","            name = compound.iupac_name or (compound.synonyms[0] if compound.synonyms else f\"CID_{compound.cid}\")\n","            real_compounds_data.append({\n","                \"name\": name,\n","                \"smiles\": compound.connectivity_smiles\n","            })\n","        else:\n","            print(f\"  Warning: Could not retrieve SMILES for CID {compound.cid}. Skipping.\")\n","\n","\n","    # Replace sample_compounds with the fetched real data\n","    sample_compounds = real_compounds_data\n","\n","    print(f\"\\n✅ Fetched {len(sample_compounds)} real compounds by CID.\")\n","    print(\"Displaying the first 10 entries:\")\n","    for i, comp in enumerate(sample_compounds[:10]):\n","        print(f\"  - {comp['name']} ({comp['smiles']})\")\n","\n","except Exception as e:\n","    print(f\"  Error fetching compounds by CID: {e}\")\n","    sample_compounds = [] # Ensure list is empty on failure\n","\n"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Fetching a diverse set of 15 compounds by CID...\n","\n","✅ Fetched 15 real compounds by CID.\n","Displaying the first 10 entries:\n","  - 2-acetyloxybenzoic acid (CC(=O)OC1=CC=CC=C1C(=O)O)\n","  - 3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one (CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3)\n","  - 2-(3,7,11,15,19,23,27,31-octamethyldotriaconta-2,6,10,14,18,22,26,30-octaenyl)phenol (CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCC1=CC=CC=C1O)C)C)C)C)C)C)C)C)\n","  - nitric acid;phenylmercury (C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-])\n","  - 2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,2-dicarboxylate (CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC)\n","  - (2-amino-3-hydroxyoctadecyl) dihydrogen phosphate (CCCCCCCCCCCCCCCC(C(COP(=O)(O)O)N)O)\n","  - [[(2R,3S,4R,5R)-5-(6-aminopurin-9-yl)-3,4-dihydroxyoxolan-2-yl]methoxy-hydroxyphosphoryl] phosphono hydrogen phosphate (C1=NC(=C2C(=N1)N(C=N2)C3C(C(C(O3)COP(=O)(O)OP(=O)(O)OP(=O)(O)O)O)O)N)\n","  - 4-[3-[[4-[[[5-(6-aminopurin-9-yl)-4-hydroxy-3-phosphonooxyoxolan-2-yl]methoxy-hydroxyphosphoryl]oxy-hydroxyphosphoryl]oxy-2-hydroxy-3,3-dimethylbutanoyl]amino]propanoylamino]butanoic acid (CC(C)(COP(=O)(O)OP(=O)(O)OCC1C(C(C(O1)N2C=NC3=C(N=CN=C32)N)O)OP(=O)(O)O)C(C(=O)NCCC(=O)NCCCC(=O)O)O)\n","  - 2-amino-1-(2,5-dimethoxyphenyl)propan-1-ol (CC(C(C1=C(C=CC(=C1)OC)OC)O)N)\n","  - (2E,6E,10E)-3,7,11,15,15-pentamethylbicyclo[12.1.0]pentadeca-2,6,10-triene (CC1=CCCC(=CC2C(C2(C)C)CCC(=CCC1)C)C)\n"]}]},{"cell_type":"markdown","metadata":{"id":"603710ed"},"source":["## Integrate biological data\n","\n","### Subtask:\n","Obtain and integrate quantitative biological data (e.g., binding affinities, IC50 values, pathway activity) for the expanded dataset.\n"]},{"cell_type":"markdown","metadata":{"id":"92f9555e"},"source":["**Reasoning**:\n","Given the difficulty in automatically fetching comprehensive quantitative biological data for the diverse set of compounds from public databases using the current tools, I will acknowledge this limitation and generate simulated biological data as a placeholder to allow the analysis to proceed.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":365},"id":"3f907f15","executionInfo":{"status":"ok","timestamp":1758221025278,"user_tz":-720,"elapsed":297,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"41d9a019-5477-414a-a264-f41d0d905cfd"},"source":["import numpy as np\n","\n","# Acknowledge the limitation in fetching real biological data\n","print(\"Note: Due to limitations in automatically fetching comprehensive quantitative biological data for a diverse set of compounds from public databases, simulated data will be used for this step.\")\n","\n","# Generate simulated quantitative biological data for the compounds in the DataFrame df\n","# We will create a 'Binding_Affinity' column with random values between 10 nM and 1000 nM (lower is stronger binding)\n","# And an 'Activity_Score' column with random values between 0.1 and 1.0 (higher is more active)\n","num_compounds = len(df)\n","\n","# Simulate Binding Affinity (e.g., IC50 in nM, lower values indicate higher affinity/potency)\n","# Using a log-uniform distribution might be more realistic for biological data\n","min_affinity_nM = 10 # 10 nM\n","max_affinity_nM = 1000 # 1000 nM\n","df['Binding_Affinity_nM'] = np.exp(np.random.uniform(np.log(min_affinity_nM), np.log(max_affinity_nM), num_compounds))\n","\n","# Simulate Activity Score (e.g., a normalized score between 0 and 1)\n","df['Activity_Score'] = np.random.uniform(0.1, 1.0, num_compounds)\n","\n","\n","# Display the head of the updated DataFrame to show the integrated simulated biological data\n","print(\"\\n✅ Generated and added simulated biological data to the DataFrame:\")\n","display(df.head())"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Note: Due to limitations in automatically fetching comprehensive quantitative biological data for a diverse set of compounds from public databases, simulated data will be used for this step.\n","\n","✅ Generated and added simulated biological data to the DataFrame:\n"]},{"output_type":"display_data","data":{"text/plain":["     MolWt  NumAtoms  NumBonds  NumHeteroatoms  NumRotatableBonds   TPSA  \\\n","0  180.159        13        13               4                  2  63.60   \n","1  314.362        22        24               5                  3  60.44   \n","2  639.065        47        47               1                 23  20.23   \n","3  340.708        11        10               5                  0  63.37   \n","4  336.384        24        24               6                 10  78.90   \n","\n","      LogP  NumRings                                               name  \\\n","0   1.3101         1                            2-acetyloxybenzoic acid   \n","1   2.5577         3  3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5...   \n","2  14.9864         1  2-(3,7,11,15,19,23,27,31-octamethyldotriaconta...   \n","3   0.5110         1                                           CID_5933   \n","4   3.1436         1  2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,...   \n","\n","                                              smiles         x         y  \\\n","0                           CC(=O)OC1=CC=CC=C1C(=O)O -2.149322 -3.887489   \n","1   CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3 -2.044868 -2.919464   \n","2  CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=... -1.414256 -5.357307   \n","3                  C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-] -2.540499 -4.417902   \n","4             CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC -1.511771 -4.117507   \n","\n","         x3        y3        z3  Binding_Affinity_nM  Activity_Score  \n","0  7.205451  5.510916  0.249612            35.471226        0.890282  \n","1  7.498172  6.430717  0.318550           119.099788        0.149799  \n","2  6.875647  4.469089  0.732941            16.953555        0.975535  \n","3  7.242733  5.209392 -0.362574            75.169080        0.890241  \n","4  7.824474  4.856133  0.399255            82.132265        0.658259  "],"text/html":["\n","  <div id=\"df-dbcc60d1-58aa-4066-b2f7-ef6e6591cdb3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MolWt</th>\n","      <th>NumAtoms</th>\n","      <th>NumBonds</th>\n","      <th>NumHeteroatoms</th>\n","      <th>NumRotatableBonds</th>\n","      <th>TPSA</th>\n","      <th>LogP</th>\n","      <th>NumRings</th>\n","      <th>name</th>\n","      <th>smiles</th>\n","      <th>x</th>\n","      <th>y</th>\n","      <th>x3</th>\n","      <th>y3</th>\n","      <th>z3</th>\n","      <th>Binding_Affinity_nM</th>\n","      <th>Activity_Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>180.159</td>\n","      <td>13</td>\n","      <td>13</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>63.60</td>\n","      <td>1.3101</td>\n","      <td>1</td>\n","      <td>2-acetyloxybenzoic acid</td>\n","      <td>CC(=O)OC1=CC=CC=C1C(=O)O</td>\n","      <td>-2.149322</td>\n","      <td>-3.887489</td>\n","      <td>7.205451</td>\n","      <td>5.510916</td>\n","      <td>0.249612</td>\n","      <td>35.471226</td>\n","      <td>0.890282</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>314.362</td>\n","      <td>22</td>\n","      <td>24</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>60.44</td>\n","      <td>2.5577</td>\n","      <td>3</td>\n","      <td>3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5...</td>\n","      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3</td>\n","      <td>-2.044868</td>\n","      <td>-2.919464</td>\n","      <td>7.498172</td>\n","      <td>6.430717</td>\n","      <td>0.318550</td>\n","      <td>119.099788</td>\n","      <td>0.149799</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>639.065</td>\n","      <td>47</td>\n","      <td>47</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>20.23</td>\n","      <td>14.9864</td>\n","      <td>1</td>\n","      <td>2-(3,7,11,15,19,23,27,31-octamethyldotriaconta...</td>\n","      <td>CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=...</td>\n","      <td>-1.414256</td>\n","      <td>-5.357307</td>\n","      <td>6.875647</td>\n","      <td>4.469089</td>\n","      <td>0.732941</td>\n","      <td>16.953555</td>\n","      <td>0.975535</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>340.708</td>\n","      <td>11</td>\n","      <td>10</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>63.37</td>\n","      <td>0.5110</td>\n","      <td>1</td>\n","      <td>CID_5933</td>\n","      <td>C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-]</td>\n","      <td>-2.540499</td>\n","      <td>-4.417902</td>\n","      <td>7.242733</td>\n","      <td>5.209392</td>\n","      <td>-0.362574</td>\n","      <td>75.169080</td>\n","      <td>0.890241</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>336.384</td>\n","      <td>24</td>\n","      <td>24</td>\n","      <td>6</td>\n","      <td>10</td>\n","      <td>78.90</td>\n","      <td>3.1436</td>\n","      <td>1</td>\n","      <td>2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,...</td>\n","      <td>CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC</td>\n","      <td>-1.511771</td>\n","      <td>-4.117507</td>\n","      <td>7.824474</td>\n","      <td>4.856133</td>\n","      <td>0.399255</td>\n","      <td>82.132265</td>\n","      <td>0.658259</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dbcc60d1-58aa-4066-b2f7-ef6e6591cdb3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dbcc60d1-58aa-4066-b2f7-ef6e6591cdb3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dbcc60d1-58aa-4066-b2f7-ef6e6591cdb3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-b0e39ce5-537e-4e14-960a-c84b4ad70385\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b0e39ce5-537e-4e14-960a-c84b4ad70385')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-b0e39ce5-537e-4e14-960a-c84b4ad70385 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"MolWt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 168.2334533714981,\n        \"min\": 180.15899999999996,\n        \"max\": 639.0650000000002,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          314.36199999999997,\n          336.3840000000002,\n          639.0650000000002\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumAtoms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 11,\n        \"max\": 47,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          22,\n          24,\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumBonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 10,\n        \"max\": 47,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          24,\n          10,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumHeteroatoms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 6,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          5,\n          6,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumRotatableBonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          10,\n          23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TPSA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.94959612384702,\n        \"min\": 20.23,\n        \"max\": 78.9,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          60.44,\n          78.9,\n          20.23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LogP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.951144905226204,\n        \"min\": 0.5109999999999999,\n        \"max\": 14.986399999999962,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2.5577000000000005,\n          3.143600000000002,\n          14.986399999999962\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumRings\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one\",\n          \"2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,2-dicarboxylate\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smiles\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3\",\n          \"CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -2.0448684692382812,\n          -1.5117712020874023\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"y\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          -2.919463872909546,\n          -4.117506980895996\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x3\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.498171806335449,\n          7.824473857879639\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"y3\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6.430717468261719,\n          4.856132984161377\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"z3\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3185495138168335,\n          0.3992554247379303\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Binding_Affinity_nM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40.314989887747124,\n        \"min\": 16.953554797001896,\n        \"max\": 119.09978813961038,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          119.09978813961038,\n          82.13226519829101\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Activity_Score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.33613990601595817,\n        \"min\": 0.14979862547003686,\n        \"max\": 0.9755346509191137,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.14979862547003686,\n          0.6582585222078627\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"29aac5f4"},"source":["## Prepare data for analysis\n","\n","### Subtask:\n","Combine the molecular features and biological data into a unified dataset and handle any missing values or data type inconsistencies.\n"]},{"cell_type":"markdown","metadata":{"id":"457b69bd"},"source":["**Reasoning**:\n","Inspect the dataframe, verify data types, and handle missing values to prepare the dataset for further analysis.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"838553f2","executionInfo":{"status":"ok","timestamp":1758221042828,"user_tz":-720,"elapsed":88,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"c3636456-417d-4036-bd34-bc9a95dbfd56"},"source":["# Inspect the df DataFrame to identify columns containing molecular features and the newly added biological data columns.\n","print(\"DataFrame columns and data types before cleaning:\")\n","display(df.info())\n","\n","# Verify that all necessary columns for analysis are present and have appropriate data types (numeric).\n","# The molecular features (MolWt, NumAtoms, etc.), projection coordinates (x, y, x3, y3, z3),\n","# and simulated biological data (Binding_Affinity_nM, Activity_Score) should be numeric.\n","# We can check the data types using df.dtypes.\n","\n","# Check for and handle any missing values in the relevant columns.\n","print(\"\\nMissing values before handling:\")\n","display(df.isnull().sum())\n","\n","# In this simulated data scenario, there are no missing values expected.\n","# However, if real data were used, we would implement a strategy here,\n","# e.g., imputation or dropping rows.\n","# For robustness, let's explicitly check and confirm.\n","\n","# Confirm that the DataFrame is ready for dimensionality reduction by displaying the column names and data types,\n","# and potentially a summary of missing values (which should be zero after this step).\n","print(\"\\nDataFrame columns and data types after cleaning:\")\n","display(df.info())\n","\n","print(\"\\nMissing values after handling (should be 0 for relevant columns):\")\n","display(df.isnull().sum())\n","\n","print(\"\\n✅ DataFrame is ready for analysis.\")"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["DataFrame columns and data types before cleaning:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 8 entries, 0 to 7\n","Data columns (total 17 columns):\n"," #   Column               Non-Null Count  Dtype  \n","---  ------               --------------  -----  \n"," 0   MolWt                8 non-null      float64\n"," 1   NumAtoms             8 non-null      int64  \n"," 2   NumBonds             8 non-null      int64  \n"," 3   NumHeteroatoms       8 non-null      int64  \n"," 4   NumRotatableBonds    8 non-null      int64  \n"," 5   TPSA                 8 non-null      float64\n"," 6   LogP                 8 non-null      float64\n"," 7   NumRings             8 non-null      int64  \n"," 8   name                 8 non-null      object \n"," 9   smiles               8 non-null      object \n"," 10  x                    8 non-null      float32\n"," 11  y                    8 non-null      float32\n"," 12  x3                   8 non-null      float32\n"," 13  y3                   8 non-null      float32\n"," 14  z3                   8 non-null      float32\n"," 15  Binding_Affinity_nM  8 non-null      float64\n"," 16  Activity_Score       8 non-null      float64\n","dtypes: float32(5), float64(5), int64(5), object(2)\n","memory usage: 1.0+ KB\n"]},{"output_type":"display_data","data":{"text/plain":["None"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Missing values before handling:\n"]},{"output_type":"display_data","data":{"text/plain":["MolWt                  0\n","NumAtoms               0\n","NumBonds               0\n","NumHeteroatoms         0\n","NumRotatableBonds      0\n","TPSA                   0\n","LogP                   0\n","NumRings               0\n","name                   0\n","smiles                 0\n","x                      0\n","y                      0\n","x3                     0\n","y3                     0\n","z3                     0\n","Binding_Affinity_nM    0\n","Activity_Score         0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>MolWt</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>NumAtoms</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>NumBonds</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>NumHeteroatoms</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>NumRotatableBonds</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>TPSA</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>LogP</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>NumRings</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>name</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>smiles</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>x</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>y</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>x3</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>y3</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>z3</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Binding_Affinity_nM</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Activity_Score</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","DataFrame columns and data types after cleaning:\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 8 entries, 0 to 7\n","Data columns (total 17 columns):\n"," #   Column               Non-Null Count  Dtype  \n","---  ------               --------------  -----  \n"," 0   MolWt                8 non-null      float64\n"," 1   NumAtoms             8 non-null      int64  \n"," 2   NumBonds             8 non-null      int64  \n"," 3   NumHeteroatoms       8 non-null      int64  \n"," 4   NumRotatableBonds    8 non-null      int64  \n"," 5   TPSA                 8 non-null      float64\n"," 6   LogP                 8 non-null      float64\n"," 7   NumRings             8 non-null      int64  \n"," 8   name                 8 non-null      object \n"," 9   smiles               8 non-null      object \n"," 10  x                    8 non-null      float32\n"," 11  y                    8 non-null      float32\n"," 12  x3                   8 non-null      float32\n"," 13  y3                   8 non-null      float32\n"," 14  z3                   8 non-null      float32\n"," 15  Binding_Affinity_nM  8 non-null      float64\n"," 16  Activity_Score       8 non-null      float64\n","dtypes: float32(5), float64(5), int64(5), object(2)\n","memory usage: 1.0+ KB\n"]},{"output_type":"display_data","data":{"text/plain":["None"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Missing values after handling (should be 0 for relevant columns):\n"]},{"output_type":"display_data","data":{"text/plain":["MolWt                  0\n","NumAtoms               0\n","NumBonds               0\n","NumHeteroatoms         0\n","NumRotatableBonds      0\n","TPSA                   0\n","LogP                   0\n","NumRings               0\n","name                   0\n","smiles                 0\n","x                      0\n","y                      0\n","x3                     0\n","y3                     0\n","z3                     0\n","Binding_Affinity_nM    0\n","Activity_Score         0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>MolWt</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>NumAtoms</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>NumBonds</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>NumHeteroatoms</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>NumRotatableBonds</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>TPSA</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>LogP</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>NumRings</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>name</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>smiles</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>x</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>y</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>x3</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>y3</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>z3</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Binding_Affinity_nM</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Activity_Score</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","✅ DataFrame is ready for analysis.\n"]}]},{"cell_type":"markdown","metadata":{"id":"10d41887"},"source":["## Perform dimensionality reduction with biological data\n","\n","### Subtask:\n","Apply dimensionality reduction techniques (e.g., UMAP, t-SNE) to the combined dataset, potentially giving weight to biological features.\n"]},{"cell_type":"markdown","metadata":{"id":"672b870a"},"source":["**Reasoning**:\n","Apply UMAP for 2D and 3D projections including the biological features and add the results to the dataframe.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":499},"id":"c4ae4931","executionInfo":{"status":"ok","timestamp":1758221062003,"user_tz":-720,"elapsed":213,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"35ae9525-b741-48b8-fd95-bf0ab1cc03d0"},"source":["# Select the feature columns from the DataFrame df that will be used for dimensionality reduction.\n","# Include both molecular features and the integrated biological data columns.\n","feature_cols_with_bio = [col for col in df.columns if col not in [\"name\", \"smiles\", \"x\", \"y\", \"x3\", \"y3\", \"z3\"]]\n","X_with_bio = df[feature_cols_with_bio].values\n","\n","# Standardize the selected feature data using StandardScaler.\n","X_scaled_with_bio = StandardScaler().fit_transform(X_with_bio)\n","\n","# Apply UMAP to create a 2D embedding including biological features.\n","# Instantiate a UMAP reducer with n_components=2 and a random_state for reproducibility.\n","reducer_2d_bio = umap.UMAP(n_components=2, random_state=42, n_neighbors=3, min_dist=0.1)\n","embedding_2d_bio = reducer_2d_bio.fit_transform(X_scaled_with_bio)\n","\n","# Add the resulting 2D embedding coordinates to the DataFrame df as new columns.\n","df[\"x_bio_umap\"] = embedding_2d_bio[:, 0]\n","df[\"y_bio_umap\"] = embedding_2d_bio[:, 1]\n","\n","# Apply UMAP to create a 3D embedding including biological features.\n","# Instantiate a UMAP reducer with n_components=3 and the same random_state.\n","reducer_3d_bio = umap.UMAP(n_components=3, random_state=42, n_neighbors=3, min_dist=0.1)\n","embedding_3d_bio = reducer_3d_bio.fit_transform(X_scaled_with_bio)\n","\n","# Add the resulting 3D embedding coordinates to the DataFrame df as new columns.\n","df[\"x3_bio_umap\"] = embedding_3d_bio[:, 0]\n","df[\"y3_bio_umap\"] = embedding_3d_bio[:, 1]\n","df[\"z3_bio_umap\"] = embedding_3d_bio[:, 2]\n","\n","print(\"✅ Applied UMAP for 2D and 3D projections including biological data and added to DataFrame.\")\n","\n","# Display the head of the updated DataFrame to show the newly added 2D and 3D projection columns.\n","display(df.head())"],"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Applied UMAP for 2D and 3D projections including biological data and added to DataFrame.\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/umap/umap_.py:1952: UserWarning:\n","\n","n_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism.\n","\n","/usr/local/lib/python3.12/dist-packages/umap/umap_.py:1952: UserWarning:\n","\n","n_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism.\n","\n"]},{"output_type":"display_data","data":{"text/plain":["     MolWt  NumAtoms  NumBonds  NumHeteroatoms  NumRotatableBonds   TPSA  \\\n","0  180.159        13        13               4                  2  63.60   \n","1  314.362        22        24               5                  3  60.44   \n","2  639.065        47        47               1                 23  20.23   \n","3  340.708        11        10               5                  0  63.37   \n","4  336.384        24        24               6                 10  78.90   \n","\n","      LogP  NumRings                                               name  \\\n","0   1.3101         1                            2-acetyloxybenzoic acid   \n","1   2.5577         3  3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5...   \n","2  14.9864         1  2-(3,7,11,15,19,23,27,31-octamethyldotriaconta...   \n","3   0.5110         1                                           CID_5933   \n","4   3.1436         1  2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,...   \n","\n","                                              smiles  ...        x3        y3  \\\n","0                           CC(=O)OC1=CC=CC=C1C(=O)O  ...  7.205451  5.510916   \n","1   CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3  ...  7.498172  6.430717   \n","2  CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=...  ...  6.875647  4.469089   \n","3                  C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-]  ...  7.242733  5.209392   \n","4             CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC  ...  7.824474  4.856133   \n","\n","         z3  Binding_Affinity_nM  Activity_Score  x_bio_umap  y_bio_umap  \\\n","0  0.249612            35.471226        0.890282   21.455732   15.612324   \n","1  0.318550           119.099788        0.149799   22.062080   16.637793   \n","2  0.732941            16.953555        0.975535   20.977505   16.853905   \n","3 -0.362574            75.169080        0.890241   22.152206   15.734858   \n","4  0.399255            82.132265        0.658259   20.801479   16.139650   \n","\n","   x3_bio_umap  y3_bio_umap  z3_bio_umap  \n","0     3.349517     3.086677   -13.054573  \n","1     3.835382     2.386342   -12.315465  \n","2     2.834255     2.061306   -12.125614  \n","3     3.834785     3.328299   -12.640767  \n","4     3.313462     2.070583   -13.034286  \n","\n","[5 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-6df33fe2-6ceb-432a-aeb8-e9aa2156dd26\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MolWt</th>\n","      <th>NumAtoms</th>\n","      <th>NumBonds</th>\n","      <th>NumHeteroatoms</th>\n","      <th>NumRotatableBonds</th>\n","      <th>TPSA</th>\n","      <th>LogP</th>\n","      <th>NumRings</th>\n","      <th>name</th>\n","      <th>smiles</th>\n","      <th>...</th>\n","      <th>x3</th>\n","      <th>y3</th>\n","      <th>z3</th>\n","      <th>Binding_Affinity_nM</th>\n","      <th>Activity_Score</th>\n","      <th>x_bio_umap</th>\n","      <th>y_bio_umap</th>\n","      <th>x3_bio_umap</th>\n","      <th>y3_bio_umap</th>\n","      <th>z3_bio_umap</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>180.159</td>\n","      <td>13</td>\n","      <td>13</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>63.60</td>\n","      <td>1.3101</td>\n","      <td>1</td>\n","      <td>2-acetyloxybenzoic acid</td>\n","      <td>CC(=O)OC1=CC=CC=C1C(=O)O</td>\n","      <td>...</td>\n","      <td>7.205451</td>\n","      <td>5.510916</td>\n","      <td>0.249612</td>\n","      <td>35.471226</td>\n","      <td>0.890282</td>\n","      <td>21.455732</td>\n","      <td>15.612324</td>\n","      <td>3.349517</td>\n","      <td>3.086677</td>\n","      <td>-13.054573</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>314.362</td>\n","      <td>22</td>\n","      <td>24</td>\n","      <td>5</td>\n","      <td>3</td>\n","      <td>60.44</td>\n","      <td>2.5577</td>\n","      <td>3</td>\n","      <td>3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5...</td>\n","      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3</td>\n","      <td>...</td>\n","      <td>7.498172</td>\n","      <td>6.430717</td>\n","      <td>0.318550</td>\n","      <td>119.099788</td>\n","      <td>0.149799</td>\n","      <td>22.062080</td>\n","      <td>16.637793</td>\n","      <td>3.835382</td>\n","      <td>2.386342</td>\n","      <td>-12.315465</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>639.065</td>\n","      <td>47</td>\n","      <td>47</td>\n","      <td>1</td>\n","      <td>23</td>\n","      <td>20.23</td>\n","      <td>14.9864</td>\n","      <td>1</td>\n","      <td>2-(3,7,11,15,19,23,27,31-octamethyldotriaconta...</td>\n","      <td>CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=...</td>\n","      <td>...</td>\n","      <td>6.875647</td>\n","      <td>4.469089</td>\n","      <td>0.732941</td>\n","      <td>16.953555</td>\n","      <td>0.975535</td>\n","      <td>20.977505</td>\n","      <td>16.853905</td>\n","      <td>2.834255</td>\n","      <td>2.061306</td>\n","      <td>-12.125614</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>340.708</td>\n","      <td>11</td>\n","      <td>10</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>63.37</td>\n","      <td>0.5110</td>\n","      <td>1</td>\n","      <td>CID_5933</td>\n","      <td>C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-]</td>\n","      <td>...</td>\n","      <td>7.242733</td>\n","      <td>5.209392</td>\n","      <td>-0.362574</td>\n","      <td>75.169080</td>\n","      <td>0.890241</td>\n","      <td>22.152206</td>\n","      <td>15.734858</td>\n","      <td>3.834785</td>\n","      <td>3.328299</td>\n","      <td>-12.640767</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>336.384</td>\n","      <td>24</td>\n","      <td>24</td>\n","      <td>6</td>\n","      <td>10</td>\n","      <td>78.90</td>\n","      <td>3.1436</td>\n","      <td>1</td>\n","      <td>2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,...</td>\n","      <td>CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC</td>\n","      <td>...</td>\n","      <td>7.824474</td>\n","      <td>4.856133</td>\n","      <td>0.399255</td>\n","      <td>82.132265</td>\n","      <td>0.658259</td>\n","      <td>20.801479</td>\n","      <td>16.139650</td>\n","      <td>3.313462</td>\n","      <td>2.070583</td>\n","      <td>-13.034286</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6df33fe2-6ceb-432a-aeb8-e9aa2156dd26')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6df33fe2-6ceb-432a-aeb8-e9aa2156dd26 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6df33fe2-6ceb-432a-aeb8-e9aa2156dd26');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-221b4647-4240-47d3-b1ba-8ab256981278\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-221b4647-4240-47d3-b1ba-8ab256981278')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-221b4647-4240-47d3-b1ba-8ab256981278 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"}},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"521eed41"},"source":["## Visualize combined projections\n","\n","### Subtask:\n","Create interactive visualizations of the projected data, allowing exploration of both chemical and biological relationships in the geometric space.\n"]},{"cell_type":"markdown","metadata":{"id":"348ccd39"},"source":["**Reasoning**:\n","Create and display interactive 2D and 3D scatter plots using plotly.express, showing the projections based on molecular and biological data, with compound names and relevant data in text and hover information.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":471},"id":"6e8e67d3","executionInfo":{"status":"error","timestamp":1758221083581,"user_tz":-720,"elapsed":140,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"edac0b4b-bdc6-4f0e-ed7f-ee783c876a81"},"source":["# Create interactive 2D scatter plot with biological data in hover info\n","fig_2d_bio = px.scatter(\n","    df, x=\"x_bio_umap\", y=\"y_bio_umap\",\n","    text=\"name\",\n","    hover_data=[\"smiles\", \"MolWt\", \"NumAtoms\", \"LogP\", \"Binding_Affinity_nM\", \"Activity_Score\"],\n","    title=\"Chemical Compounds - 2D UMAP Projection (with Biological Data)\",\n","    width=800, height=800\n",")\n","\n","# Customize 2D plot appearance\n","fig_2d_bio.update_layout(\n","    xaxis=dict(title=\"Geometric Dimension 1 (Bio-informed)\"),\n","    yaxis=dict(title=\"Geometric Dimension 2 (Bio-informed)\"),\n","    plot_bgcolor='rgba(0,0,0,0.05)',\n","    paper_bgcolor='white'\n",")\n","fig_2d_bio.update_traces(textposition='top center', marker=dict(size=12, color=df['Activity_Score'], colorscale='Viridis')) # Color by Activity Score\n","\n","# Create interactive 3D scatter plot with biological data in hover info\n","fig_3d_bio = px.scatter_3d(\n","    df, x=\"x3_bio_umap\", y=\"y3_bio_umap\", z=\"z3_bio_umap\",\n","    text=\"name\",\n","    hover_data=[\"smiles\", \"MolWt\", \"NumAtoms\", \"LogP\", \"Binding_Affinity_nM\", \"Activity_Score\"],\n","    title=\"Chemical Compounds - 3D UMAP Projection (with Biological Data)\",\n","    width=800, height=800,\n","    color='Activity_Score', # Color by Activity Score in 3D as well\n","    colorscale='Viridis'\n",")\n","\n","# Customize 3D plot appearance\n","fig_3d_bio.update_layout(\n","    scene = dict(\n","        xaxis_title='Geometric Dimension 1 (Bio-informed)',\n","        yaxis_title='Geometric Dimension 2 (Bio-informed)',\n","        zaxis_title='Geometric Dimension 3 (Bio-informed)'),\n","    margin=dict(l=0, r=0, b=0, t=40)\n",")\n","fig_3d_bio.update_traces(textposition='top center', marker=dict(size=8))\n","\n","\n","# Display both plots\n","print(\"✅ Displaying 2D and 3D UMAP Projections with Biological Data:\")\n","fig_2d_bio.show()\n","fig_3d_bio.show()"],"execution_count":17,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"scatter_3d() got an unexpected keyword argument 'colorscale'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-2260678866.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;31m# Create interactive 3D scatter plot with biological data in hover info\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 20\u001b[0;31m fig_3d_bio = px.scatter_3d(\n\u001b[0m\u001b[1;32m     21\u001b[0m     \u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"x3_bio_umap\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y3_bio_umap\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mz\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"z3_bio_umap\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0mtext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"name\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: scatter_3d() got an unexpected keyword argument 'colorscale'"]}]},{"cell_type":"markdown","metadata":{"id":"86dac7f7"},"source":["**Reasoning**:\n","The previous command failed because `plotly.express.scatter_3d` does not accept the `colorscale` argument directly in the function call like `scatter`. The `colorscale` should be specified within the `color_continuous_scale` argument when using a continuous color variable. I will fix the 3D plot creation to use the correct argument for the colorscale.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"CmGx6XaAJM4s","executionInfo":{"status":"ok","timestamp":1758221095502,"user_tz":-720,"elapsed":460,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"8b08f3c6-acad-4911-c8f6-e41fc7a17afa"},"source":["# Create interactive 2D scatter plot with biological data in hover info\n","fig_2d_bio = px.scatter(\n","    df, x=\"x_bio_umap\", y=\"y_bio_umap\",\n","    text=\"name\",\n","    hover_data=[\"smiles\", \"MolWt\", \"NumAtoms\", \"LogP\", \"Binding_Affinity_nM\", \"Activity_Score\"],\n","    title=\"Chemical Compounds - 2D UMAP Projection (with Biological Data)\",\n","    width=800, height=800\n",")\n","\n","# Customize 2D plot appearance\n","fig_2d_bio.update_layout(\n","    xaxis=dict(title=\"Geometric Dimension 1 (Bio-informed)\"),\n","    yaxis=dict(title=\"Geometric Dimension 2 (Bio-informed)\"),\n","    plot_bgcolor='rgba(0,0,0,0.05)',\n","    paper_bgcolor='white'\n",")\n","fig_2d_bio.update_traces(textposition='top center', marker=dict(size=12, color=df['Activity_Score'], colorscale='Viridis')) # Color by Activity Score\n","\n","# Create interactive 3D scatter plot with biological data in hover info\n","# Corrected: Use color_continuous_scale instead of colorscale for 3D scatter plot\n","fig_3d_bio = px.scatter_3d(\n","    df, x=\"x3_bio_umap\", y=\"y3_bio_umap\", z=\"z3_bio_umap\",\n","    text=\"name\",\n","    hover_data=[\"smiles\", \"MolWt\", \"NumAtoms\", \"LogP\", \"Binding_Affinity_nM\", \"Activity_Score\"],\n","    title=\"Chemical Compounds - 3D UMAP Projection (with Biological Data)\",\n","    width=800, height=800,\n","    color='Activity_Score', # Color by Activity Score in 3D as well\n","    color_continuous_scale='Viridis' # Use the correct argument for continuous colorscale\n",")\n","\n","# Customize 3D plot appearance\n","fig_3d_bio.update_layout(\n","    scene = dict(\n","        xaxis_title='Geometric Dimension 1 (Bio-informed)',\n","        yaxis_title='Geometric Dimension 2 (Bio-informed)',\n","        zaxis_title='Geometric Dimension 3 (Bio-informed)'),\n","    margin=dict(l=0, r=0, b=0, t=40)\n",")\n","fig_3d_bio.update_traces(textposition='top center', marker=dict(size=8))\n","\n","\n","# Display both plots\n","print(\"✅ Displaying 2D and 3D UMAP Projections with Biological Data:\")\n","fig_2d_bio.show()\n","fig_3d_bio.show()"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ Displaying 2D and 3D UMAP Projections with Biological Data:\n"]},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"232ab46b-07c9-4573-bcd0-e27a13e485bb\" class=\"plotly-graph-div\" style=\"height:800px; width:800px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"232ab46b-07c9-4573-bcd0-e27a13e485bb\")) {                    Plotly.newPlot(                        \"232ab46b-07c9-4573-bcd0-e27a13e485bb\",                        [{\"customdata\":[[\"CC(=O)OC1=CC=CC=C1C(=O)O\",180.15899999999996,13,1.3101,35.4712259483005,0.8902820074821776],[\"CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3\",314.36199999999997,22,2.5577000000000005,119.09978813961038,0.14979862547003686],[\"CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCC1=CC=CC=C1O)C)C)C)C)C)C)C)C\",639.0650000000002,47,14.986399999999962,16.953554797001896,0.9755346509191137],[\"C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-]\",340.708,11,0.5109999999999999,75.16907963038203,0.8902414495730114],[\"CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC\",336.3840000000002,24,3.143600000000002,82.13226519829101,0.6582585222078627],[\"CCCCCCCCCCCCCCCC(C(COP(=O)(O)O)N)O\",381.49399999999997,25,4.265200000000005,393.59063735493635,0.40016675682749336],[\"C1=NC(=C2C(=N1)N(C=N2)C3C(C(C(O3)COP(=O)(O)OP(=O)(O)OP(=O)(O)O)O)O)N\",507.18200000000013,31,-1.6290000000000004,95.10354769349749,0.7190850086136896],[\"CC(C)(COP(=O)(O)OP(=O)(O)OCC1C(C(C(O1)N2C=NC3=C(N=CN=C32)N)O)OP(=O)(O)O)C(C(=O)NCCC(=O)NCCCC(=O)O)O\",793.5100000000001,51,-1.7302999999999953,13.784048826973907,0.8343646951153404]],\"hovertemplate\":\"x_bio_umap=%{x}\\u003cbr\\u003ey_bio_umap=%{y}\\u003cbr\\u003ename=%{text}\\u003cbr\\u003esmiles=%{customdata[0]}\\u003cbr\\u003eMolWt=%{customdata[1]}\\u003cbr\\u003eNumAtoms=%{customdata[2]}\\u003cbr\\u003eLogP=%{customdata[3]}\\u003cbr\\u003eBinding_Affinity_nM=%{customdata[4]}\\u003cbr\\u003eActivity_Score=%{customdata[5]}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[0.8902820074821776,0.14979862547003686,0.9755346509191137,0.8902414495730114,0.6582585222078627,0.40016675682749336,0.7190850086136896,0.8343646951153404],\"symbol\":\"circle\",\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]],\"size\":12},\"mode\":\"markers+text\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"text\":[\"2-acetyloxybenzoic acid\",\"3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one\",\"2-(3,7,11,15,19,23,27,31-octamethyldotriaconta-2,6,10,14,18,22,26,30-octaenyl)phenol\",\"CID_5933\",\"2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,2-dicarboxylate\",\"(2-amino-3-hydroxyoctadecyl) dihydrogen phosphate\",\"[[(2R,3S,4R,5R)-5-(6-aminopurin-9-yl)-3,4-dihydroxyoxolan-2-yl]methoxy-hydroxyphosphoryl] phosphono hydrogen phosphate\",\"4-[3-[[4-[[[5-(6-aminopurin-9-yl)-4-hydroxy-3-phosphonooxyoxolan-2-yl]methoxy-hydroxyphosphoryl]oxy-hydroxyphosphoryl]oxy-2-hydroxy-3,3-dimethylbutanoyl]amino]propanoylamino]butanoic acid\"],\"x\":[21.455732,22.06208,20.977505,22.152206,20.80148,21.70195,19.451937,19.62548],\"xaxis\":\"x\",\"y\":[15.612324,16.637793,16.853905,15.734858,16.13965,17.274122,17.527935,17.004602],\"yaxis\":\"y\",\"type\":\"scatter\",\"textposition\":\"top center\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Geometric Dimension 1 (Bio-informed)\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Geometric Dimension 2 (Bio-informed)\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Chemical Compounds - 2D UMAP Projection (with Biological Data)\"},\"height\":800,\"width\":800,\"plot_bgcolor\":\"rgba(0,0,0,0.05)\",\"paper_bgcolor\":\"white\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('232ab46b-07c9-4573-bcd0-e27a13e485bb');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}},{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"f89e85a1-c33f-46e6-9357-929bd980105b\" class=\"plotly-graph-div\" style=\"height:800px; width:800px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f89e85a1-c33f-46e6-9357-929bd980105b\")) {                    Plotly.newPlot(                        \"f89e85a1-c33f-46e6-9357-929bd980105b\",                        [{\"customdata\":[[\"CC(=O)OC1=CC=CC=C1C(=O)O\",180.15899999999996,13,1.3101,35.4712259483005,0.8902820074821776],[\"CS(=O)(=O)C1=CC=C(C=C1)C2=C(C(=O)OC2)C3=CC=CC=C3\",314.36199999999997,22,2.5577000000000005,119.09978813961038,0.14979862547003686],[\"CC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCCC(=CCC1=CC=CC=C1O)C)C)C)C)C)C)C)C\",639.0650000000002,47,14.986399999999962,16.953554797001896,0.9755346509191137],[\"C1=CC=C(C=C1)[Hg].[N+](=O)(O)[O-]\",340.708,11,0.5109999999999999,75.16907963038203,0.8902414495730114],[\"CCCCOC(=O)COC(=O)C1=CC=CC=C1C(=O)OCCCC\",336.3840000000002,24,3.143600000000002,82.13226519829101,0.6582585222078627],[\"CCCCCCCCCCCCCCCC(C(COP(=O)(O)O)N)O\",381.49399999999997,25,4.265200000000005,393.59063735493635,0.40016675682749336],[\"C1=NC(=C2C(=N1)N(C=N2)C3C(C(C(O3)COP(=O)(O)OP(=O)(O)OP(=O)(O)O)O)O)N\",507.18200000000013,31,-1.6290000000000004,95.10354769349749,0.7190850086136896],[\"CC(C)(COP(=O)(O)OP(=O)(O)OCC1C(C(C(O1)N2C=NC3=C(N=CN=C32)N)O)OP(=O)(O)O)C(C(=O)NCCC(=O)NCCCC(=O)O)O\",793.5100000000001,51,-1.7302999999999953,13.784048826973907,0.8343646951153404]],\"hovertemplate\":\"x3_bio_umap=%{x}\\u003cbr\\u003ey3_bio_umap=%{y}\\u003cbr\\u003ez3_bio_umap=%{z}\\u003cbr\\u003ename=%{text}\\u003cbr\\u003esmiles=%{customdata[0]}\\u003cbr\\u003eMolWt=%{customdata[1]}\\u003cbr\\u003eNumAtoms=%{customdata[2]}\\u003cbr\\u003eLogP=%{customdata[3]}\\u003cbr\\u003eBinding_Affinity_nM=%{customdata[4]}\\u003cbr\\u003eActivity_Score=%{marker.color}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":[0.8902820074821776,0.14979862547003686,0.9755346509191137,0.8902414495730114,0.6582585222078627,0.40016675682749336,0.7190850086136896,0.8343646951153404],\"coloraxis\":\"coloraxis\",\"symbol\":\"circle\",\"size\":8},\"mode\":\"markers+text\",\"name\":\"\",\"scene\":\"scene\",\"showlegend\":false,\"text\":[\"2-acetyloxybenzoic acid\",\"3-(4-methylsulfonylphenyl)-4-phenyl-2H-furan-5-one\",\"2-(3,7,11,15,19,23,27,31-octamethyldotriaconta-2,6,10,14,18,22,26,30-octaenyl)phenol\",\"CID_5933\",\"2-O-(2-butoxy-2-oxoethyl) 1-O-butyl benzene-1,2-dicarboxylate\",\"(2-amino-3-hydroxyoctadecyl) dihydrogen phosphate\",\"[[(2R,3S,4R,5R)-5-(6-aminopurin-9-yl)-3,4-dihydroxyoxolan-2-yl]methoxy-hydroxyphosphoryl] phosphono hydrogen phosphate\",\"4-[3-[[4-[[[5-(6-aminopurin-9-yl)-4-hydroxy-3-phosphonooxyoxolan-2-yl]methoxy-hydroxyphosphoryl]oxy-hydroxyphosphoryl]oxy-2-hydroxy-3,3-dimethylbutanoyl]amino]propanoylamino]butanoic acid\"],\"x\":[3.3495166,3.8353815,2.8342545,3.8347852,3.3134623,3.5269654,5.7980027,6.1001368],\"y\":[3.086677,2.386342,2.0613058,3.328299,2.070583,1.9780848,3.7633536,4.06249],\"z\":[-13.054573,-12.315465,-12.125614,-12.640767,-13.0342865,-11.678438,-14.605313,-14.875773],\"type\":\"scatter3d\",\"textposition\":\"top center\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"scene\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"xaxis\":{\"title\":{\"text\":\"Geometric Dimension 1 (Bio-informed)\"}},\"yaxis\":{\"title\":{\"text\":\"Geometric Dimension 2 (Bio-informed)\"}},\"zaxis\":{\"title\":{\"text\":\"Geometric Dimension 3 (Bio-informed)\"}}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Activity_Score\"}},\"colorscale\":[[0.0,\"#440154\"],[0.1111111111111111,\"#482878\"],[0.2222222222222222,\"#3e4989\"],[0.3333333333333333,\"#31688e\"],[0.4444444444444444,\"#26828e\"],[0.5555555555555556,\"#1f9e89\"],[0.6666666666666666,\"#35b779\"],[0.7777777777777778,\"#6ece58\"],[0.8888888888888888,\"#b5de2b\"],[1.0,\"#fde725\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Chemical Compounds - 3D UMAP Projection (with Biological Data)\"},\"height\":800,\"width\":800,\"margin\":{\"l\":0,\"r\":0,\"b\":0,\"t\":40}},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f89e85a1-c33f-46e6-9357-929bd980105b');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"e9d11a57"},"source":["## Correlate geometry with biology\n","\n","### Subtask:\n","Develop code to statistically analyze the relationship between geometric patterns (distances, clusters, etc.) and biological data.\n"]},{"cell_type":"markdown","metadata":{"id":"abb8a0f7"},"source":["**Reasoning**:\n","Calculate pairwise distances in the 2D and 3D bio-informed UMAP spaces, calculate pairwise differences in the selected biological data ('Activity_Score'), and compute the correlation between these distances and differences.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e59cf386","executionInfo":{"status":"ok","timestamp":1758221122922,"user_tz":-720,"elapsed":81,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"4ec5b734-8b44-4dba-eaf0-cbbf6d5eb5c7"},"source":["from scipy.spatial.distance import pdist, squareform\n","from scipy.stats import pearsonr, spearmanr\n","\n","# 1. Calculate pairwise distances in 2D and 3D bio-informed UMAP spaces\n","coords_2d_bio = df[[\"x_bio_umap\", \"y_bio_umap\"]].values\n","dist_matrix_2d_bio = squareform(pdist(coords_2d_bio))\n","# Flatten the distance matrix to get a list of unique pairwise distances (excluding self-distances)\n","pairwise_distances_2d_bio = dist_matrix_2d_bio[np.triu_indices_from(dist_matrix_2d_bio, k=1)]\n","\n","coords_3d_bio = df[[\"x3_bio_umap\", \"y3_bio_umap\", \"z3_bio_umap\"]].values\n","dist_matrix_3d_bio = squareform(pdist(coords_3d_bio))\n","# Flatten the 3D distance matrix\n","pairwise_distances_3d_bio = dist_matrix_3d_bio[np.triu_indices_from(dist_matrix_3d_bio, k=1)]\n","\n","# 2. Select a relevant biological data column\n","biological_data_col = 'Activity_Score'\n","biological_data = df[biological_data_col].values\n","\n","# 3. Calculate the pairwise differences in the selected biological data\n","# Create a matrix of absolute differences\n","diff_matrix_bio = np.abs(np.subtract.outer(biological_data, biological_data))\n","# Flatten the difference matrix to get a list of unique pairwise differences\n","pairwise_differences_bio = diff_matrix_bio[np.triu_indices_from(diff_matrix_bio, k=1)]\n","\n","# 4. Compute the correlation between geometric distances and biological data differences\n","# Pearson correlation (measures linear relationship)\n","pearson_corr_2d, _ = pearsonr(pairwise_distances_2d_bio, pairwise_differences_bio)\n","pearson_corr_3d, _ = pearsonr(pairwise_distances_3d_bio, pairwise_differences_bio)\n","\n","# Spearman correlation (measures monotonic relationship, less sensitive to outliers)\n","spearman_corr_2d, _ = spearmanr(pairwise_distances_2d_bio, pairwise_differences_bio)\n","spearman_corr_3d, _ = spearmanr(pairwise_distances_3d_bio, pairwise_differences_bio)\n","\n","# 5. Print the calculated correlation coefficients\n","print(f\"Correlation between 2D Bio-informed UMAP Distance and Absolute Activity Score Difference:\")\n","print(f\"  Pearson Correlation: {pearson_corr_2d:.3f}\")\n","print(f\"  Spearman Correlation: {spearman_corr_2d:.3f}\")\n","\n","print(f\"\\nCorrelation between 3D Bio-informed UMAP Distance and Absolute Activity Score Difference:\")\n","print(f\"  Pearson Correlation: {pearson_corr_3d:.3f}\")\n","print(f\"  Spearman Correlation: {spearman_corr_3d:.3f}\")\n","\n","print(\"\\n✅ Calculated and printed correlations between geometric distances and biological differences.\")"],"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Correlation between 2D Bio-informed UMAP Distance and Absolute Activity Score Difference:\n","  Pearson Correlation: -0.109\n","  Spearman Correlation: -0.116\n","\n","Correlation between 3D Bio-informed UMAP Distance and Absolute Activity Score Difference:\n","  Pearson Correlation: -0.184\n","  Spearman Correlation: -0.130\n","\n","✅ Calculated and printed correlations between geometric distances and biological differences.\n"]}]},{"cell_type":"markdown","metadata":{"id":"425a6509"},"source":["## Develop predictive models (optional)\n","\n","### Subtask:\n","Explore building machine learning models to predict biological activities or relationships based on geometric features.\n"]},{"cell_type":"markdown","metadata":{"id":"aa5bd12e"},"source":["**Reasoning**:\n","Select features and target, split data, choose and train a regression model, evaluate the model, and print the evaluation metrics.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e56f35ec","executionInfo":{"status":"ok","timestamp":1758221145063,"user_tz":-720,"elapsed":968,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"8ae1fd17-f97c-4562-ce40-74ae577c21a4"},"source":["from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","\n","# 1. Select features for the predictive model.\n","# These include the 2D and 3D bio-informed UMAP coordinates.\n","features = ['x_bio_umap', 'y_bio_umap', 'x3_bio_umap', 'y3_bio_umap', 'z3_bio_umap']\n","X = df[features]\n","\n","# 2. Define the target variable for prediction.\n","# Use the 'Activity_Score' column as the target.\n","y = df['Activity_Score']\n","\n","# Check if there are enough samples for splitting\n","if len(df) < 2:\n","    print(\"Error: Not enough data points to split into training and testing sets.\")\n","else:\n","    # 3. Split the data into training and testing sets.\n","    # Use a test set size that makes sense for the available data (e.g., 20-30%)\n","    # Ensure stratification is not used for regression targets directly, but a random_state is good practice.\n","    test_size = max(0.2, 1 / len(df)) # Ensure at least one sample in test if data is very small\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)\n","\n","    # 4. Choose a suitable regression model.\n","    # RandomForestRegressor is a good choice for potentially non-linear relationships.\n","    model = RandomForestRegressor(n_estimators=100, random_state=42)\n","\n","    # 5. Train the selected model on the training data.\n","    print(\"Training the RandomForestRegressor model...\")\n","    model.fit(X_train, y_train)\n","    print(\"✅ Model training complete.\")\n","\n","    # 6. Evaluate the trained model's performance on the testing data.\n","    y_pred = model.predict(X_test)\n","\n","    # Calculate regression metrics\n","    mae = mean_absolute_error(y_test, y_pred)\n","    mse = mean_squared_error(y_test, y_pred)\n","    rmse = np.sqrt(mse) # Root Mean Squared Error\n","    r2 = r2_score(y_test, y_pred)\n","\n","    # 7. Print the evaluation metrics.\n","    print(\"\\nModel Evaluation Metrics (on Test Set):\")\n","    print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n","    print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n","    print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")\n","    print(f\"R-squared (R²): {r2:.4f}\")\n","\n","    print(\"\\n✅ Model evaluation complete. Metrics printed.\")\n"],"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Training the RandomForestRegressor model...\n","✅ Model training complete.\n","\n","Model Evaluation Metrics (on Test Set):\n","Mean Absolute Error (MAE): 0.6143\n","Mean Squared Error (MSE): 0.3953\n","Root Mean Squared Error (RMSE): 0.6287\n","R-squared (R²): -24.2221\n","\n","✅ Model evaluation complete. Metrics printed.\n"]}]},{"cell_type":"markdown","metadata":{"id":"b87b6524"},"source":["## Summarize findings and next steps\n","\n","### Subtask:\n","Present the results of the analysis, including any significant correlations found, the performance of the predictive model, and suggest future research directions.\n"]},{"cell_type":"markdown","metadata":{"id":"0946ccf6"},"source":["**Reasoning**:\n","Summarize the analysis results, discuss correlations, report model performance, and suggest future research directions based on the previous steps.\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aec8bff3","executionInfo":{"status":"ok","timestamp":1758221175748,"user_tz":-720,"elapsed":46,"user":{"displayName":"Euan Craig","userId":"09082665700593880860"}},"outputId":"9eae4535-be86-432b-fdee-9e7a674a7464"},"source":["# 1. Summarize the key findings from the previous steps\n","\n","print(\"## Summary of Analysis and Findings\\n\")\n","\n","print(\"### Data Acquisition and Preparation\")\n","print(f\"- Successfully replaced initial sample data with {len(sample_compounds)} real compounds fetched by CID from PubChem, due to issues with dynamic search methods.\")\n","print(\"- Computed a standard set of molecular features (MolWt, NumAtoms, etc.) for the fetched compounds.\")\n","print(\"- Integrated simulated quantitative biological data ('Binding_Affinity_nM', 'Activity_Score') as fetching real, comprehensive biological data automatically was not feasible within the scope.\")\n","print(\"- The combined dataset was prepared with no missing values in the relevant columns.\")\n","\n","print(\"\\n### Dimensionality Reduction and Visualization\")\n","print(\"- Applied UMAP to project the combined molecular and *simulated* biological features into 2D and 3D geometric spaces ('x_bio_umap', 'y_bio_umap', 'x3_bio_umap', 'y3_bio_umap', 'z3_bio_umap').\")\n","print(\"- Created interactive Plotly visualizations (2D and 3D scatter plots) showing the compounds in the bio-informed geometric space. Points were colored by the simulated 'Activity_Score', and hover information included both chemical and biological data.\")\n","\n","print(\"\\n### Correlation Analysis (Geometric Distance vs. Biological Difference)\")\n","print(\"- Calculated pairwise Euclidean distances between compounds in both the 2D and 3D bio-informed UMAP spaces.\")\n","print(\"- Calculated the absolute pairwise differences in the simulated 'Activity_Score'.\")\n","print(\"- Computed Pearson (linear) and Spearman (monotonic) correlation coefficients between the geometric distances and the biological differences.\")\n","print(f\"  - 2D Bio-informed UMAP Distance vs. Activity Score Difference:\")\n","print(f\"    - Pearson Correlation: {pearson_corr_2d:.3f}\")\n","print(f\"    - Spearman Correlation: {spearman_corr_2d:.3f}\")\n","print(f\"  - 3D Bio-informed UMAP Distance vs. Activity Score Difference:\")\n","print(f\"    - Pearson Correlation: {pearson_corr_3d:.3f}\")\n","print(f\"    - Spearman Correlation: {spearman_corr_3d:.3f}\")\n","\n","print(\"\\n### Predictive Modeling Attempt\")\n","print(\"- Built a RandomForestRegressor model to predict the simulated 'Activity_Score' using the 2D and 3D bio-informed UMAP coordinates as features.\")\n","print(\"- Split the data into training and testing sets.\")\n","print(\"- Evaluated the model's performance using MAE, MSE, RMSE, and R-squared.\")\n","print(\"  - Model Evaluation Metrics (on Test Set):\")\n","print(f\"    - Mean Absolute Error (MAE): {mae:.4f}\")\n","print(f\"    - Mean Squared Error (MSE): {mse:.4f}\")\n","print(f\"    - Root Mean Squared Error (RMSE): {rmse:.4f}\")\n","print(f\"    - R-squared (R²): {r2:.4f}\")\n","\n","\n","# 2. Discuss the observed correlations\n","print(\"\\n## Discussion of Correlations\")\n","print(\"The correlation analysis between the geometric distances in the bio-informed UMAP spaces and the absolute differences in the simulated 'Activity_Score' revealed weak negative correlations in both 2D (Pearson: {pearson_corr_2d:.3f}, Spearman: {spearman_corr_2d:.3f}) and 3D (Pearson: {pearson_corr_3d:.3f}, Spearman: {spearman_corr_3d:.3f}) spaces.\")\n","print(\"A negative correlation indicates a slight tendency for compounds that are closer in the UMAP space to have more similar activity scores.\")\n","print(\"However, the magnitude of these correlations is small (close to zero), suggesting that while the UMAP projection incorporating biological data attempts to group compounds with similar activity, the relationship is not strongly linear or monotonic based on simple Euclidean distance in this small, diverse dataset with simulated biological values.\")\n","print(\"The 3D projection shows a slightly stronger negative correlation (Pearson: {pearson_corr_3d:.3f}) than the 2D projection, potentially capturing more variance related to the biological data.\")\n","print(\"It's crucial to remember that these correlations are based on *simulated* biological data and a relatively small, diverse set of compounds. Real biological data and a larger, more focused dataset (e.g., compounds targeting the same protein family) would likely yield different correlation patterns.\")\n","\n","# 3. Report and interpret model performance\n","print(\"\\n## Predictive Model Performance\")\n","print(\"The RandomForestRegressor model trained to predict the simulated 'Activity_Score' from the bio-informed UMAP coordinates showed poor performance on the test set.\")\n","print(f\"- MAE ({mae:.4f}), MSE ({mse:.4f}), and RMSE ({rmse:.4f}) indicate the average magnitude of the prediction errors. These values need to be interpreted relative to the range of the target variable ('Activity_Score' is between 0.1 and 1.0). An MAE of {mae:.4f} means, on average, the model's predictions were off by about {mae:.4f} units of the Activity Score.\")\n","print(f\"- The R-squared value of {r2:.4f} is highly negative. For regression models, R-squared typically ranges from 0 to 1, where 1 indicates a perfect fit. A negative R-squared value means the model performs worse than simply predicting the mean of the target variable. In this case, the UMAP coordinates alone, as features for a standard RandomForestRegressor, are not effective in predicting the simulated 'Activity_Score' for this dataset.\")\n","print(\"This poor performance suggests that the geometric relationships captured by UMAP (even when informed by the simulated biological data) are not sufficiently predictive of the 'Activity_Score' on their own, or that the relationship is too complex for this simple model and feature set.\")\n","\n","# 4. Suggest concrete future research directions\n","print(\"\\n## Future Research Directions\")\n","print(\"Based on this exploratory analysis, several directions can be pursued:\")\n","print(\"1.  **Expand and Refine the Dataset:**\")\n","print(\"    - **Larger Scale Data:** Fetch a significantly larger number of compounds. The limited sample size is a major constraint.\")\n","print(\"    - **Real Biological Data:** Prioritize obtaining *real* quantitative biological data (e.g., binding affinities, IC50s, EC50s, pathway activation levels) for compounds targeting specific, well-characterized biological systems (e.g., a single protein target family, a specific signaling pathway). This is critical for drawing meaningful biological conclusions.\")\n","print(\"    - **Curated Datasets:** Utilize curated datasets from resources like ChEMBL, BindingDB, or specific literature reviews, which often contain structured biological activity data.\")\n","print(\"2.  **Explore Alternative Feature Engineering:**\")\n","print(\"    - **Different Molecular Descriptors:** Instead of or in addition to the RDKit descriptors, explore other types of molecular representations (e.g., ECFP fingerprints, molecular graphs, 3D conformer-based features).\")\n","print(\"    - **Feature Selection/Engineering:** Identify the most relevant molecular and biological features before dimensionality reduction or modeling.\")\n","print(\"3.  **Investigate Different Dimensionality Reduction Techniques:**\")\n","print(\"    - **Parameter Tuning:** Experiment with UMAP parameters (n_neighbors, min_dist, metric) and potentially different weighting schemes for biological features during UMAP embedding.\")\n","print(\"    - **Alternative Methods:** Explore other DR techniques like t-SNE, PCA, or methods specifically designed for integrating multi-modal data.\")\n","print(\"4.  **Enhance Predictive Modeling:**\")\n","print(\"    - **Different Models:** Try other regression models (e.g., Support Vector Regression, Neural Networks, Gradient Boosting models like XGBoost or LightGBM) that might capture non-linear relationships better.\")\n","print(\"    - **Feature Importance:** Analyze feature importance from models like RandomForest to understand which UMAP dimensions (or original features if modeling directly) are most predictive.\")\n","print(\"    - **Multi-task Learning:** If multiple biological activities are available, consider models that can predict them jointly.\")\n","print(\"5.  **Refine Geometric Pattern Detection:**\")\n","print(\"    - **Advanced Clustering:** Apply clustering algorithms (e.g., k-means, DBSCAN, hierarchical clustering) to the UMAP embeddings to identify groups of geometrically similar compounds and analyze their biological properties.\")\n","print(\"    - **Graph-based Methods:** Represent compounds as nodes in a graph based on geometric proximity and use graph theory metrics to find relationships.\")\n","print(\"    - **Statistical Significance:** Develop methods to assess the statistical significance of observed geometric patterns (triangles, lines, resonances) in relation to biological data, beyond simple correlation.\")\n","print(\"6.  **Biological Interpretation and Experimental Validation:**\")\n","print(\"    - **Domain Expertise:** Collaborate with biologists/pharmacologists to interpret the meaning of geometric clusters or patterns in the context of known biological mechanisms.\")\n","print(\"    - **Targeted Experiments:** Design and conduct experiments to validate hypotheses generated from the geometric-biological correlations (e.g., test for synergy between compounds in geometric triangles, investigate biochemical pathways for compounds on geometric lines).\")\n","print(\"7.  **Explore Geometric Resonance:**\")\n","print(\"    - **Theoretical Basis:** Further investigate the theoretical basis for expecting biological relevance from geometric distances near fundamental constants. This requires input from theoretical biology or chemistry.\")\n","print(\"    - **Systematic Search:** Systematically search for pairs/groups of compounds exhibiting these resonance distances in larger, real datasets and look for shared biological properties.\")\n","\n","print(\"\\nIn summary, while the initial exploration with simulated data and a small dataset provided a framework, significant work is needed to obtain real biological data, expand the dataset, and apply more sophisticated analytical and modeling techniques to uncover meaningful relationships between chemical geometry and biological function.\")\n"],"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["## Summary of Analysis and Findings\n","\n","### Data Acquisition and Preparation\n","- Successfully replaced initial sample data with 15 real compounds fetched by CID from PubChem, due to issues with dynamic search methods.\n","- Computed a standard set of molecular features (MolWt, NumAtoms, etc.) for the fetched compounds.\n","- Integrated simulated quantitative biological data ('Binding_Affinity_nM', 'Activity_Score') as fetching real, comprehensive biological data automatically was not feasible within the scope.\n","- The combined dataset was prepared with no missing values in the relevant columns.\n","\n","### Dimensionality Reduction and Visualization\n","- Applied UMAP to project the combined molecular and *simulated* biological features into 2D and 3D geometric spaces ('x_bio_umap', 'y_bio_umap', 'x3_bio_umap', 'y3_bio_umap', 'z3_bio_umap').\n","- Created interactive Plotly visualizations (2D and 3D scatter plots) showing the compounds in the bio-informed geometric space. Points were colored by the simulated 'Activity_Score', and hover information included both chemical and biological data.\n","\n","### Correlation Analysis (Geometric Distance vs. Biological Difference)\n","- Calculated pairwise Euclidean distances between compounds in both the 2D and 3D bio-informed UMAP spaces.\n","- Calculated the absolute pairwise differences in the simulated 'Activity_Score'.\n","- Computed Pearson (linear) and Spearman (monotonic) correlation coefficients between the geometric distances and the biological differences.\n","  - 2D Bio-informed UMAP Distance vs. Activity Score Difference:\n","    - Pearson Correlation: -0.109\n","    - Spearman Correlation: -0.116\n","  - 3D Bio-informed UMAP Distance vs. Activity Score Difference:\n","    - Pearson Correlation: -0.184\n","    - Spearman Correlation: -0.130\n","\n","### Predictive Modeling Attempt\n","- Built a RandomForestRegressor model to predict the simulated 'Activity_Score' using the 2D and 3D bio-informed UMAP coordinates as features.\n","- Split the data into training and testing sets.\n","- Evaluated the model's performance using MAE, MSE, RMSE, and R-squared.\n","  - Model Evaluation Metrics (on Test Set):\n","    - Mean Absolute Error (MAE): 0.6143\n","    - Mean Squared Error (MSE): 0.3953\n","    - Root Mean Squared Error (RMSE): 0.6287\n","    - R-squared (R²): -24.2221\n","\n","## Discussion of Correlations\n","The correlation analysis between the geometric distances in the bio-informed UMAP spaces and the absolute differences in the simulated 'Activity_Score' revealed weak negative correlations in both 2D (Pearson: {pearson_corr_2d:.3f}, Spearman: {spearman_corr_2d:.3f}) and 3D (Pearson: {pearson_corr_3d:.3f}, Spearman: {spearman_corr_3d:.3f}) spaces.\n","A negative correlation indicates a slight tendency for compounds that are closer in the UMAP space to have more similar activity scores.\n","However, the magnitude of these correlations is small (close to zero), suggesting that while the UMAP projection incorporating biological data attempts to group compounds with similar activity, the relationship is not strongly linear or monotonic based on simple Euclidean distance in this small, diverse dataset with simulated biological values.\n","The 3D projection shows a slightly stronger negative correlation (Pearson: {pearson_corr_3d:.3f}) than the 2D projection, potentially capturing more variance related to the biological data.\n","It's crucial to remember that these correlations are based on *simulated* biological data and a relatively small, diverse set of compounds. Real biological data and a larger, more focused dataset (e.g., compounds targeting the same protein family) would likely yield different correlation patterns.\n","\n","## Predictive Model Performance\n","The RandomForestRegressor model trained to predict the simulated 'Activity_Score' from the bio-informed UMAP coordinates showed poor performance on the test set.\n","- MAE (0.6143), MSE (0.3953), and RMSE (0.6287) indicate the average magnitude of the prediction errors. These values need to be interpreted relative to the range of the target variable ('Activity_Score' is between 0.1 and 1.0). An MAE of 0.6143 means, on average, the model's predictions were off by about 0.6143 units of the Activity Score.\n","- The R-squared value of -24.2221 is highly negative. For regression models, R-squared typically ranges from 0 to 1, where 1 indicates a perfect fit. A negative R-squared value means the model performs worse than simply predicting the mean of the target variable. In this case, the UMAP coordinates alone, as features for a standard RandomForestRegressor, are not effective in predicting the simulated 'Activity_Score' for this dataset.\n","This poor performance suggests that the geometric relationships captured by UMAP (even when informed by the simulated biological data) are not sufficiently predictive of the 'Activity_Score' on their own, or that the relationship is too complex for this simple model and feature set.\n","\n","## Future Research Directions\n","Based on this exploratory analysis, several directions can be pursued:\n","1.  **Expand and Refine the Dataset:**\n","    - **Larger Scale Data:** Fetch a significantly larger number of compounds. The limited sample size is a major constraint.\n","    - **Real Biological Data:** Prioritize obtaining *real* quantitative biological data (e.g., binding affinities, IC50s, EC50s, pathway activation levels) for compounds targeting specific, well-characterized biological systems (e.g., a single protein target family, a specific signaling pathway). This is critical for drawing meaningful biological conclusions.\n","    - **Curated Datasets:** Utilize curated datasets from resources like ChEMBL, BindingDB, or specific literature reviews, which often contain structured biological activity data.\n","2.  **Explore Alternative Feature Engineering:**\n","    - **Different Molecular Descriptors:** Instead of or in addition to the RDKit descriptors, explore other types of molecular representations (e.g., ECFP fingerprints, molecular graphs, 3D conformer-based features).\n","    - **Feature Selection/Engineering:** Identify the most relevant molecular and biological features before dimensionality reduction or modeling.\n","3.  **Investigate Different Dimensionality Reduction Techniques:**\n","    - **Parameter Tuning:** Experiment with UMAP parameters (n_neighbors, min_dist, metric) and potentially different weighting schemes for biological features during UMAP embedding.\n","    - **Alternative Methods:** Explore other DR techniques like t-SNE, PCA, or methods specifically designed for integrating multi-modal data.\n","4.  **Enhance Predictive Modeling:**\n","    - **Different Models:** Try other regression models (e.g., Support Vector Regression, Neural Networks, Gradient Boosting models like XGBoost or LightGBM) that might capture non-linear relationships better.\n","    - **Feature Importance:** Analyze feature importance from models like RandomForest to understand which UMAP dimensions (or original features if modeling directly) are most predictive.\n","    - **Multi-task Learning:** If multiple biological activities are available, consider models that can predict them jointly.\n","5.  **Refine Geometric Pattern Detection:**\n","    - **Advanced Clustering:** Apply clustering algorithms (e.g., k-means, DBSCAN, hierarchical clustering) to the UMAP embeddings to identify groups of geometrically similar compounds and analyze their biological properties.\n","    - **Graph-based Methods:** Represent compounds as nodes in a graph based on geometric proximity and use graph theory metrics to find relationships.\n","    - **Statistical Significance:** Develop methods to assess the statistical significance of observed geometric patterns (triangles, lines, resonances) in relation to biological data, beyond simple correlation.\n","6.  **Biological Interpretation and Experimental Validation:**\n","    - **Domain Expertise:** Collaborate with biologists/pharmacologists to interpret the meaning of geometric clusters or patterns in the context of known biological mechanisms.\n","    - **Targeted Experiments:** Design and conduct experiments to validate hypotheses generated from the geometric-biological correlations (e.g., test for synergy between compounds in geometric triangles, investigate biochemical pathways for compounds on geometric lines).\n","7.  **Explore Geometric Resonance:**\n","    - **Theoretical Basis:** Further investigate the theoretical basis for expecting biological relevance from geometric distances near fundamental constants. This requires input from theoretical biology or chemistry.\n","    - **Systematic Search:** Systematically search for pairs/groups of compounds exhibiting these resonance distances in larger, real datasets and look for shared biological properties.\n","\n","In summary, while the initial exploration with simulated data and a small dataset provided a framework, significant work is needed to obtain real biological data, expand the dataset, and apply more sophisticated analytical and modeling techniques to uncover meaningful relationships between chemical geometry and biological function.\n"]}]},{"cell_type":"markdown","metadata":{"id":"8fce3040"},"source":["## Summary:\n","\n","### Data Analysis Key Findings\n","\n","*   Due to issues with dynamically fetching compound data based on biological activity keywords, the dataset was expanded by fetching a fixed list of 15 diverse compounds by their PubChem CIDs.\n","*   Quantitative biological data (`Binding_Affinity_nM`, `Activity_Score`) was simulated and successfully integrated into the dataset, as automatically fetching real, comprehensive biological data for a diverse set was not feasible.\n","*   Dimensionality reduction using UMAP, incorporating both molecular features and the simulated biological data, resulted in 2D and 3D embeddings.\n","*   Interactive visualizations of the UMAP projections were created, colored by the simulated 'Activity\\_Score', showing the distribution of compounds in the bio-informed geometric space.\n","*   Correlation analysis between the geometric distances in the UMAP space and the differences in simulated 'Activity\\_Score' showed weak negative correlations (Pearson 2D: -0.109, Spearman 2D: -0.116; Pearson 3D: -0.184, Spearman 3D: -0.130).\n","*   A predictive model (RandomForestRegressor) using the bio-informed UMAP coordinates to predict the simulated 'Activity\\_Score' performed poorly, indicated by a highly negative R-squared value (-24.2221).\n","\n","### Insights or Next Steps\n","\n","*   Obtain and integrate *real*, curated biological activity data for a larger, more focused set of compounds (e.g., compounds targeting a specific protein family) from databases like ChEMBL to derive meaningful biological insights.\n","*   Explore alternative molecular representations and dimensionality reduction techniques, potentially with explicit weighting of biological features, and apply more sophisticated machine learning models to improve the prediction of biological activity from chemical structure and geometric space.\n"]}]}